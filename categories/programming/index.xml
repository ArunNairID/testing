<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> </title>
    <link>https://www.xaprb.com/categories/programming/index.xml</link>
    <language>en-us</language>
    <author></author>
    <rights>Copyright (c) 2016</rights>
    <updated>0001-01-01 00:00:00 &#43;0000 UTC</updated>

    
        <item>
          <title>The Age Of Smart Machines</title>
          <link>https://www.xaprb.com/blog/2015/03/01/the-age-of-smart-machines/</link>
          <pubDate>Sun, 01 Mar 2015 13:51:18 -0500</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2015/03/01/the-age-of-smart-machines/</guid>
          <description>&lt;p&gt;What will life be like in the age of smart machines? According to a &lt;a href=&#34;http://issuu.com/batteninstitute/docs/smartmachines-120414-issuu&#34;&gt;Batten
Institute briefing on Innovation in the Age of Smart
Machines&lt;/a&gt;, up
to 66% of the U.S. workforce may lose their jobs to computers in the coming
decades. The report points out, however, that humans will always be needed to
direct the computers. I&amp;rsquo;m not so sure.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.xaprb.com/media/2015/03/zt_0001.jpg&#34;&gt;&lt;img src=&#34;https://www.xaprb.com/media/2015/03/zt_0001-thumb.jpg&#34; alt=&#34;ZT 0001&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;I think the briefing is right to predict that just as machines replaced a lot of
the physical labor we used to do, they&amp;rsquo;ll soon replace a lot of the thinking we
currently do. Industrialized economies turned into &amp;ldquo;knowledge worker&amp;rdquo; economies
to adjust to this, and we&amp;rsquo;re in the beginning stages of another transformation
now, with probably more disruptive effects. Although a lot of people today feel
safe that they won&amp;rsquo;t be obsoleted because they&amp;rsquo;re thinkers, in the future that
is not likely to hold true, and the societal implications are stunning:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;developed economies are bifurcating into a small educated elite and the rest.
There will be no comfortable &amp;ldquo;middle.&amp;rdquo; The elite&amp;mdash;about 10% to 15% of the
population&amp;mdash;will be those with skills that are highly complementary with
computers&amp;hellip; Others will endure stagnant or falling wages&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thus far I agree, but there&amp;rsquo;s one area I don&amp;rsquo;t think the report goes far enough.
Whether out of inability to see what&amp;rsquo;s coming, or fear of it, or reluctance to
be the bearer of bad news, the brief reassures us that people will still be
irreplaceable:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We must learn how to get along with smart machines in order to maximize the
enormous value they bring to the workplace&amp;hellip; the accelerating pace of
technology change and innovation creates a growing demand for high-level
technical skills.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The report goes on to name several areas that seem immune to technological takeover:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The engineering skills to design and program new machines&lt;/li&gt;
&lt;li&gt;A demand for employees who can analyze large data sets&lt;/li&gt;
&lt;li&gt;Marketing, which requires deep knowledge of human psychology&lt;/li&gt;
&lt;li&gt;Design&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It concludes that &amp;ldquo;the ability to appeal to human beings is something machines
aren&amp;rsquo;t good at.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s where it leaves off an insanely important three-letter word.&lt;/p&gt;

&lt;h3 id=&#34;where-will-technology-stop&#34;&gt;Where Will Technology Stop?&lt;/h3&gt;

&lt;p&gt;Whenever you hear someone say &amp;ldquo;computers aren&amp;rsquo;t good at X,&amp;rdquo; mentally append &lt;em&gt;yet&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Machines may not understand how to anticipate and play on human emotions and
responses yet, but they will. The word &lt;em&gt;yet&lt;/em&gt; is the crucial part. There is
already a growing body of not only research, but working implementations of
computers being able to understand and contextualize human emotional responses.
I&amp;rsquo;ll leave it as an exercise to the reader to explore this topic.&lt;/p&gt;

&lt;p&gt;The implication is that we should not be reassured. Computers will someday
understand marketing, design, analysis of large data sets, and how to build and
program new machines. When these breakthroughs happen they will be stunning. But
they will happen. It&amp;rsquo;s just a matter of time.&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t believe it, just think of the last 150 years of &amp;ldquo;X will never
happen&amp;rdquo; claims. My parents used to have a full-page spread from a newspaper,
probably the Wall Street Journal, fastened to our refrigerator with magnets. It
was covered with dozens of thumbnail-sized photos of expert after expert
proclaiming that heavier-than-air flight was impossible. All the predictions
were from the late 1800s and early 1900s, just before flight was achieved.&lt;/p&gt;

&lt;p&gt;Practically every scientific advance has been predicted by claims of its
impossibility.  X-Rays, nuclear reactions, faster-than-the-speed-of-sound
flight, &lt;em&gt;everything&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Self-driving cars, anyone?&lt;/p&gt;

&lt;h3 id=&#34;what-can-t-computers-do&#34;&gt;What Can&amp;rsquo;t Computers Do?&lt;/h3&gt;

&lt;p&gt;I believe there is &lt;em&gt;one&lt;/em&gt; untouchable realm, and that&amp;rsquo;s the deeply internal area
of purpose in our lives. I believe technology won&amp;rsquo;t be able to give us happiness, fulfillment, or meaning.&lt;/p&gt;

&lt;p&gt;Some things have to be done for oneself. Similar to the ability to
&lt;a href=&#34;https://www.xaprb.com/blog/2014/07/05/on-focus/&#34;&gt;focus&lt;/a&gt;, no external person or thing can give you
happiness.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.xaprb.com/media/2015/03/thx-1138.jpg&#34; alt=&#34;THX 1138 Confession&#34; /&gt;&lt;/p&gt;

&lt;p&gt;An analogy is physical fitness. If a machine or drug could magically make you
strong and fit in every measurable dimension, would it be the same as fitness
earned through &lt;a href=&#34;https://www.xaprb.com/blog/2014/01/20/crossfit-safety/&#34;&gt;CrossFit&lt;/a&gt; or other strenuous
work? I claim it is not. Physical conditioning is partly emotional and
mental&amp;mdash;maybe even spiritual. These benefits have to be &lt;em&gt;earned.&lt;/em&gt; You&amp;rsquo;ll only
get out what you put in.&lt;/p&gt;

&lt;p&gt;Thus it will go with technology in general, in the realms of psychology,
religion, and general emotional and mental health. The great film &lt;a href=&#34;https://www.youtube.com/watch?v=ly_djozCksg&#34;&gt;THX
1138&lt;/a&gt; has a digital confession
booth that gives a dystopian version of what it might look like for
computers to play the role of God in our lives. Although crude, it&amp;rsquo;s probably
not too far off in terms of the efficacy of even impossibly advanced technology.&lt;/p&gt;

&lt;p&gt;Someday we may find ourselves with everything we need except something
meaningful to do. Computers, technology, and corporations will need us only to
feed the system. Metaphorically speaking, of course.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.xaprb.com/media/2015/03/matrix.jpg&#34; alt=&#34;Matrix&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Who will be the true survivors and winners then?&lt;/p&gt;

&lt;p&gt;I believe it will be those who have put in the hard work required to be in good
relationships with themselves. Regardless of their environs, people who have
cultivated the ability to exist in the moment&amp;mdash;a conscious contact with a
higher plane of existence that is to be found and contacted only within&amp;mdash;will
be the true elites.&lt;/p&gt;

&lt;p&gt;Or do I also stop short of realizing the power of the coming advances of
technology and medicine?&lt;/p&gt;

&lt;p&gt;Recommended reading:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Viktor Frankl, &lt;a href=&#34;http://www.amazon.com/Mans-Search-Meaning-Viktor-Frankl/dp/080701429X?tag=xaprb-20&#34;&gt;Man&amp;rsquo;s Search For Meaning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Don Miguel Ruiz, &lt;a href=&#34;http://www.amazon.com/Four-Agreements-Practical-Personal-Freedom/dp/1878424319/?tag=xaprb-20&#34;&gt;The Four Agreements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
    
        <item>
          <title>If Eventual Consistency Seems Hard, Wait Till You Try MVCC</title>
          <link>https://www.xaprb.com/blog/2014/12/08/eventual-consistency-simpler-than-mvcc/</link>
          <pubDate>Mon, 08 Dec 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2014/12/08/eventual-consistency-simpler-than-mvcc/</guid>
          <description>&lt;p&gt;This should sound familiar:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;One of the great lies about NoSQL databases is that they&amp;rsquo;re simple. Simplicity
done wrong makes things a lot harder and more complicated to develop and
operate. Programmers and operations staff end up reimplementing (badly) things
the database should do.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nobody argued this line of reasoning more vigorously than when trying to defend
relational databases, especially during the darkest years (ca.  2009-2010), when
NoSQL still meant &lt;strong&gt;NO SQL DAMMIT&lt;/strong&gt;, all sorts of NoSQL databases were
sprouting, and most of them were massively overhyped.  But as valid as those
arguments against NoSQL&amp;rsquo;s &amp;ldquo;false economy&amp;rdquo; simplicity were and are, the arguments
against relational databases&amp;rsquo; complexity hold true, too.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.xaprb.com/media/2014/12/puzzle.jpg&#34; alt=&#34;Puzzle&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The truth is that no database is really simple. Databases have a lot of
functionality and behaviors&amp;mdash;even the &amp;ldquo;simple&amp;rdquo; databases do&amp;mdash;and require
deep knowledge to use well when reliability, correctness, and performance are
important.&lt;/p&gt;

&lt;h3 id=&#34;eventual-consistency-is-hard&#34;&gt;Eventual Consistency is Hard&lt;/h3&gt;

&lt;p&gt;Eventual consistency is hard to work with because developers bear extra burden.
I suppose the &lt;a href=&#34;http://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf&#34;&gt;Dynamo
paper&lt;/a&gt; is
the best source to cite:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Dynamo targets the design space of an “always writeable” data store&amp;hellip;
This requirement forces us to push the complexity of conflict resolution to
the reads in order to ensure that writes are never rejected&amp;hellip; The next design
choice is who performs the process of conflict resolution. This can be done by
the data store or the application. If conflict resolution is done by the data
store, its choices are rather limited&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One can trivially quote this out of context and argue that a bunch of
database logic ends up being reimplemented in the application at read time,
everywhere a read occurs. Indeed, sometimes this extreme does occur. Some use
cases might actually need to check and reconcile conflicting updates with every
single read.&lt;/p&gt;

&lt;p&gt;You can find lots of other examples of this type of complexity in similar
systems, such as the &lt;a href=&#34;http://docs.basho.com/riak/latest/dev/using/conflict-resolution/&#34;&gt;Riak
documentation&lt;/a&gt;,
which has lofty-sounding phrases like &amp;ldquo;causal context&amp;rdquo; and &amp;ldquo;dotted version
vectors.&amp;rdquo; It does sound like one would need a PhD to use such a system, doesn&amp;rsquo;t
it?&lt;/p&gt;

&lt;p&gt;When challenged in this way, many NoSQL advocates would respond that tradeoffs
are necessary in distributed systems, and perhaps bring up the CAP Theorem,
&lt;a href=&#34;http://aphyr.com/tags/jepsen&#34;&gt;Jepsen&lt;/a&gt; and so forth.  These kinds of topics are
similar to Schroedinger&amp;rsquo;s Cat, or double-slit experiments, or whatnot.
Relatively ignorant people like me bring these up around the pool table and
argue about them to try to sound smart, without knowing much about them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.xaprb.com/media/2014/12/schroedingers-cat.jpg&#34; alt=&#34;schroedinger&#39;s cat&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Distributed systems are hard!  There&amp;rsquo;s no denying that. But is there a better
way?&lt;/p&gt;

&lt;h3 id=&#34;how-simple-are-relational-systems-anyway&#34;&gt;How Simple Are Relational Systems Anyway?&lt;/h3&gt;

&lt;p&gt;All this distributed systems theory and eventual consistency and so on&amp;hellip; it&amp;rsquo;s
enough to make you long for the simplicity of a good old relational database,
isn&amp;rsquo;t it? &amp;ldquo;Everyone knows&amp;rdquo; that servers are massively powerful these days. Your
favorite relational database of choice is claimed to be capable of scaling
vertically to all but the most incredibly large-scale applications. So why not
just do that, and keep it simple?&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s talk about that word, simplicity.&lt;/p&gt;

&lt;p&gt;Simplicity in relational systems is only achieved when there&amp;rsquo;s no concurrency.
Add in concurrency, and all the complexity of distributed systems comes home to
roost, because distributed and concurrent are fundamentally about solving some
of the same problems. In fact, unless you&amp;rsquo;re running a single-writer,
single-reader database on a single-core server&amp;mdash;and maybe not even then, I&amp;rsquo;m
not sure&amp;mdash;you actually have a distributed system inside your server.
Everything&amp;rsquo;s distributed.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p&gt;Sorry, I&amp;#39;m not impressed with serializable isolation via a single writer mutex.&lt;/p&gt;&amp;mdash; Preetam Jinka (@PreetamJinka) &lt;a href=&#34;//twitter.com/PreetamJinka/status/537313622410952704&#34;&gt;November 25, 2014&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Concurrent operation isn&amp;rsquo;t a nice-to-have in most systems, it&amp;rsquo;s a given.
The way many relational systems handle concurrency is with this nifty little
thing called Multi-Version Concurrency Control (MVCC). It&amp;rsquo;s way simpler than
eventual consistency. (Sarcasm alert!)&lt;/p&gt;

&lt;p&gt;It works a little like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;There are four standard transaction isolation levels, each with their own
kinds of constraints and tradeoffs. Each defines which kinds of bad,
inconsistent behaviors aren&amp;rsquo;t allowed to happen.&lt;/li&gt;
&lt;li&gt;In REPEATABLE READ, the isolation level that a lot of people consider ideal,
you get &amp;ldquo;read snapshots&amp;rdquo; that let you see an unchanging view of the database over
time. Even as it&amp;rsquo;s changing underneath you! This is implemented by keeping
old row versions until they are no longer needed.&lt;/li&gt;
&lt;li&gt;Other isolation levels, such as READ COMMITTED, are &amp;ldquo;bad.&amp;rdquo; Because they don&amp;rsquo;t
protect you, the developer, from the complexity of the underlying
implementation. And they don&amp;rsquo;t allow you a true ACID experience.&lt;sup&gt;1&lt;/sup&gt; A true ACID
experience is about Atomicity, Consistency, Isolation, and
Durability.&lt;/li&gt;
&lt;li&gt;Back to REPEATABLE READ, the only isolation level that is approved by the
Holy See. It&amp;rsquo;s really simple. Everything appears just like you are the only
user in the system. As a developer, you can just work with the database
logically as you&amp;rsquo;re supposed to, and you don&amp;rsquo;t have to think about other
transactions happening concurrently.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Clearly, this is much better than eventually consistent databases, right?&lt;/p&gt;

&lt;h3 id=&#34;the-rabbit-hole-that-is-mvcc&#34;&gt;The Rabbit-Hole That Is MVCC&lt;/h3&gt;

&lt;p&gt;Unfortunately, the relational databases and their MVCCs are far from such a
utopia. The reality is that MVCC is way more complex than I&amp;rsquo;ve described.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.xaprb.com/media/2014/12/alice-down-the-rabbit-hole.jpg&#34; alt=&#34;alice-down-the-rabbit-hole&#34; /&gt;&lt;/p&gt;

&lt;p&gt;MVCC and the ACID properties are intertwined in very complex ways. The first
problem comes from the ACID properties themselves.  These four properties are
almost universally misunderstood. It&amp;rsquo;s almost as bad as the CAP theorem. I have
to look up the definitions myself every single time. And then I always
wind up asking myself, &amp;ldquo;what&amp;rsquo;s the difference between Consistency and
Isolation again?&amp;rdquo; Because the definitions seem like each one is halfway about the
other, and there&amp;rsquo;s no consistent way to think about them in isolation from each
other.&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Next, isolation levels. Every database implements them differently. There&amp;rsquo;s a
lot of disagreement about the right way to implement each of the isolation
levels, and this must have been an issue when the standards were written,
because the standards leave a lot unspecified. Most databases are pretty
opinionated, by contrast. Here&amp;rsquo;s what
&lt;a href=&#34;http://www.postgresql.org/docs/9.3/static/transaction-iso.html&#34;&gt;PostgreSQL says&lt;/a&gt; (emphasis mine):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The reason that PostgreSQL only provides three isolation levels is that this
is &lt;em&gt;the only sensible way&lt;/em&gt;&lt;sup&gt;3&lt;/sup&gt; to map the standard isolation levels to the
multiversion concurrency control architecture.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And MySQL, &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.6/en/set-transaction.html&#34;&gt;via InnoDB&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;InnoDB supports each of the transaction isolation levels described here using
different locking strategies. You can enforce a high degree of consistency
with the default REPEATABLE READ level, for operations on crucial data where
ACID compliance is important. Or you can relax the consistency rules with READ
COMMITTED or even READ UNCOMMITTED, in situations such as bulk reporting where
precise consistency and repeatable results are less important than minimizing
the amount of overhead for locking. SERIALIZABLE enforces even stricter rules
than REPEATABLE READ, and is used mainly in specialized situations, such as
with XA transactions and for troubleshooting issues with concurrency and
deadlocks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At a glance, it sounds like MySQL/InnoDB asserts that all four levels can be
sensibly implemented, in contradiction to PostgreSQL&amp;rsquo;s documentation. We&amp;rsquo;ll dig
into this more later. For the moment it&amp;rsquo;s enough to note that InnoDB&amp;rsquo;s MVCC behavior
is more similar to Oracle&amp;rsquo;s than it is to PostgreSQL&amp;rsquo;s, but still, the docs say
things like &amp;ldquo;A somewhat Oracle-like isolation level with respect to consistent
(nonlocking) reads.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;From experience I know that Microsoft SQL Server&amp;rsquo;s locking and multiversion
concurrency model is different yet again. So there&amp;rsquo;s at least four different
implementations with very different behaviors&amp;mdash;and we haven&amp;rsquo;t even gotten to
other databases. For example, Jim Starkey&amp;rsquo;s failed Falcon storage engine
for MySQL was going to use &amp;ldquo;pure MVCC&amp;rdquo; in contradistinction to InnoDB&amp;rsquo;s &amp;ldquo;mixed
MVCC,&amp;rdquo; whatever that means. Falcon, naturally, also had &amp;ldquo;quirks&amp;rdquo; in its MVCC
implementation.&lt;/p&gt;

&lt;p&gt;Serializable isolation is fairly clear, but understanding what the other systems
actually provide is really hard. And even when you understand what they&amp;rsquo;re
supposed to provide, documentation and implementation bugs make it even worse.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s dig into a few of these implementations a bit and see what&amp;rsquo;s really the
situation.&lt;/p&gt;

&lt;h3 id=&#34;innodb-s-mvcc&#34;&gt;InnoDB&amp;rsquo;s MVCC&lt;/h3&gt;

&lt;p&gt;InnoDB&amp;rsquo;s MVCC works, at a high level, by keeping old row versions as long as
they&amp;rsquo;re needed to be able to recreate a consistent snapshot of the past as the
transaction originally saw it, and locking any rows that are modified.&lt;/p&gt;

&lt;p&gt;There are at least four different scenarios to explore (one for each isolation
level), and more in various edge cases. Quirks, let&amp;rsquo;s call them.&lt;/p&gt;

&lt;p&gt;The most obvious case we should look at is REPEATABLE READ, the default. It&amp;rsquo;s
designed to let you select a set of rows and then repeatedly see the same rows
on every subsequent select, as long as you keep your transaction open. As the
docs say,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All consistent reads within the same transaction read the snapshot established
by the first read.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sounds elegant and beautiful. But it turns ugly really, really fast.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For locking reads (SELECT with FOR UPDATE or LOCK IN SHARE MODE), UPDATE, and
DELETE statements, locking depends on whether the statement uses a unique
index with a unique search condition, or a range-type search condition. For a
unique index with a unique search condition, InnoDB locks only the index
record found, not the gap before it. For other search conditions, InnoDB locks
the index range scanned, using gap locks or next-key locks to block insertions
by other sessions into the gaps covered by the range.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What the hell just happened?&lt;/p&gt;

&lt;p&gt;The abstraction just
&lt;a href=&#34;http://www.joelonsoftware.com/articles/LeakyAbstractions.html&#34;&gt;leaked&lt;/a&gt;, that&amp;rsquo;s
what.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.xaprb.com/media/2014/12/spiral-watch.jpg&#34; alt=&#34;Spiral Watch&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The problem is due to several logical necessities and implementation details.
It&amp;rsquo;s not solely one or the other. The MVCC model is trying to balance a bunch of
things going on concurrently, and there are logical contradictions that can&amp;rsquo;t go
away, no matter how sophisticated the implementation. There are going to be edge
cases that have to be handled with special exceptions in the behavior. And the
implementation details leak through, inevitably. That&amp;rsquo;s what you are seeing above.&lt;/p&gt;

&lt;p&gt;One of the logical necessities, for example, is that you can only modify the
latest version of a row (eventually, at least). If you try to update an old version (the version
contained in your consistent snapshot), you&amp;rsquo;re going to get into trouble. There
can (eventually) be only one truth, and conflicting versions of the data aren&amp;rsquo;t allowed to be
presented to a user as they are in eventual consistency. For this reason,
various kinds of operations cause you to confront hard questions, such as:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Should the implementation disallow updating rows for which the snapshot has
an out-of-date version, i.e. its version of reality has diverged from the
latest version?&lt;/li&gt;
&lt;li&gt;What is the latest version? Is it the latest committed version, the latest
uncommitted version? What does &amp;ldquo;latest&amp;rdquo; mean? Is it &amp;ldquo;most recently updated by
clock time&amp;rdquo; or is it &amp;ldquo;update by the transaction with the highest sequence
number?&amp;rdquo; Does this vary between isolation levels?&lt;/li&gt;
&lt;li&gt;If the implementation allows updating rows that are out-of-date (supposing
the previous points have been resolved), what happens? Do you &amp;ldquo;leak&amp;rdquo; out of
your isolation level, hence breaking consistency within your transaction? Do
you fail the transaction? Or do you allow updating an old version, but then
fail at commit time?&lt;/li&gt;
&lt;li&gt;What happens if a transaction fails, and how does it fail / how is this
presented to the user? (InnoDB used to deadlock and roll back the whole
transaction; later it was changed to roll back just the failed statement).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Fundamentally you are going to run into problems such as these. And they have to
be resolved, with various levels of confusion and complexity.&lt;/p&gt;

&lt;p&gt;I should also note that InnoDB actually tries to go above and beyond the SQL
standard. The standard allows phantom reads in REPEATABLE READ, but InnoDB uses next-key
locking and gap locking to avoid this and bring REPEATABLE READ closer to
SERIALIZABLE without the obnoxious locking implied by SERIALIZABLE. PostgreSQL
does the same thing.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve barely scratched the surface of the complexities of how InnoDB handles
transactions, locking, isolation levels, and MVCC. I am not kidding. There is a
large amount of documentation about it in the official manual, much of which
requires serious study to understand. And beyond that, there is a lot that&amp;rsquo;s not
officially documented. For example, here&amp;rsquo;s a &lt;a href=&#34;//blogs.oracle.com/mysqlinnodb/entry/mysql_5_5_innodb_change&#34;&gt;blog post from one of the InnoDB
authors&lt;/a&gt;
that explains how various performance optimizations impact index operations.
This might seem unrelated, but every access InnoDB makes to data has to interact
with the MVCC rules it implements. And this all has implications for locking,
deadlocks, and so on. Locking in itself is a complex topic in InnoDB. The list goes
on.&lt;/p&gt;

&lt;h3 id=&#34;how-it-works-in-postgresql&#34;&gt;How It Works In PostgreSQL&lt;/h3&gt;

&lt;p&gt;Sensibly, apparently ;-) Well, seriously, I have a lot less experience with
PostgreSQL. But from the above it&amp;rsquo;s quite clear that the PostgreSQL
documentation writers could find lots of support for a claim that attempting to
implement all four standard isolation levels, at least in the way that InnoDB
does, is not sensible.&lt;/p&gt;

&lt;p&gt;The PostgreSQL documentation, unlike the MySQL documentation, is largely limited
to a &lt;a href=&#34;http://www.postgresql.org/docs/9.3/static/transaction-iso.html&#34;&gt;single
page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p&gt;Read cursor isolation docs for Oracle, PG, InnoDB. PG docs are clear, others probably not. Tech writing is hard.&lt;/p&gt;&amp;mdash; markcallaghan (@markcallaghan) &lt;a href=&#34;//twitter.com/markcallaghan/status/528335458221449217&#34;&gt;October 31, 2014&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;First of all, PostgreSQL uses READ COMMITTED by default. This means that if you
SELECT some rows within a transaction, then wait while another transaction
modifies them and commits, then SELECT them again, you&amp;rsquo;ll see the changes.
Whether this is OK is for you to decide. It&amp;rsquo;s worth noting that a lot of people
run MySQL/InnoDB the same way, and there are lots of bugs and special behaviors
that end up making other isolation levels unusable for various reasons when
various features are used in MySQL.&lt;/p&gt;

&lt;p&gt;I think Mark Callaghan&amp;rsquo;s tweet, embedded above, is largely true. But even the
PostgreSQL docs, as clear as they are, have some things that are hard to parse.
Does the first part of this excerpt contradict the second part? (Emphasis mine):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a SELECT query (without a FOR UPDATE/SHARE clause) sees only data committed
before the query began; it &lt;em&gt;never sees either uncommitted data or changes
committed during query execution by concurrent transactions&lt;/em&gt;. In effect, a
SELECT query sees a snapshot of the database as of the instant the query
begins to run. However, SELECT does see the effects of previous updates
executed within its own transaction, even though they are not yet committed.
Also note that &lt;em&gt;two successive SELECT commands can see different data, even
though they are within a single transaction, if other transactions commit
changes during execution of the first SELECT.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Even PostgreSQL&amp;rsquo;s apparently less complicated MVCC implementation has thorny
questions such as those. On more careful reading, the meaning becomes clear (and
I don&amp;rsquo;t see how to improve it, by the way). The issue remains: these are subtle
topics that inherently require close attention to detail.&lt;/p&gt;

&lt;p&gt;One of the most elegantly put points in this documentation page is the remark
that &amp;ldquo;Consistent use of Serializable transactions can simplify development.&amp;rdquo;&lt;/p&gt;

&lt;h3 id=&#34;it-s-not-just-mysql-and-postgresql&#34;&gt;It&amp;rsquo;s Not Just MySQL And PostgreSQL&lt;/h3&gt;

&lt;p&gt;Many other systems implement some type of MVCC. All of them, as per the name,
rely on multiple versions of records/rows, and deal with the various conflicts
between these multiple versions in various ways. Some more complex, some less.
The behavior the developer sees is &lt;a href=&#34;https://www.xaprb.com/blog/2013/12/28/immutability-mvcc-and-garbage-collection/&#34;&gt;heavily influenced by the underlying
implementation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And developers have to deal with this. If you&amp;rsquo;re going to use one of these
systems competently, you must know the intricacies. I saw this again and
again while consulting with MySQL users. Many developers, including myself, have
written applications that fall afoul of the MVCC implementation and rules. The
results?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Performance problems.&lt;/li&gt;
&lt;li&gt;Availability problems.&lt;/li&gt;
&lt;li&gt;Deadlocks and other errors.&lt;/li&gt;
&lt;li&gt;Bugs. Horrible, subtle bugs in the way the app uses the database.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The only systems I&amp;rsquo;m aware of that can avoid these problems are those that use
strategies such as single-writer designs. These, contrary to what their
proponents will say about them, generally do not scale well at all. Many a
MyISAM has been reinvented by database developers who don&amp;rsquo;t understand why
MyISAM doesn&amp;rsquo;t scale.&lt;/p&gt;

&lt;h3 id=&#34;back-to-eventual-consistency&#34;&gt;Back To Eventual Consistency&lt;/h3&gt;

&lt;p&gt;In contrast with that nightmare of complexity, I&amp;rsquo;m not so sure eventual
consistency is really all that hard for developers to deal with. The developers
will &lt;em&gt;always&lt;/em&gt; need to be aware of the exact behavior of the implementation
they&amp;rsquo;re writing against, relational or not. I&amp;rsquo;ve studied quite a few eventually
consistent databases (although I&amp;rsquo;ll admit I&amp;rsquo;ve spent most of my career elbows
deep in InnoDB) and it seems hard to believe Cassandra or Riak is really more
complex to develop against than InnoDB, for the use cases that they serve well.&lt;/p&gt;

&lt;p&gt;Eventually consistent is easy to ridicule, though. Here&amp;rsquo;s one of my favorites:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p&gt;Eventually consistent &lt;a href=&#34;//twitter.com/hashtag/FiveWordTechHorrors?src=hash&#34;&gt;#FiveWordTechHorrors&lt;/a&gt;&lt;/p&gt;&amp;mdash; Stewart Smith (@stewartsmith) &lt;a href=&#34;//twitter.com/stewartsmith/status/410651205615230976&#34;&gt;December 11, 2013&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;(If you don&amp;rsquo;t get the joke, just wait a while. It&amp;rsquo;ll come to you.)&lt;/p&gt;

&lt;p&gt;Can we have the best of all worlds? Can we have transactional behavior with
strong ACID properties, high concurrency, etc, etc? Some claim that we can.
&lt;a href=&#34;//foundationdb.com/&#34;&gt;FoundationDB&lt;/a&gt;, for example, &lt;a href=&#34;//foundationdb.com/acid-claims&#34;&gt;asserts&lt;/a&gt; that
it&amp;rsquo;s possible and that their implementation is fully serializable, calling other
isolation levels weak, i.e.  not true I-as-in-ACID. I haven&amp;rsquo;t yet used
FoundationDB so I can&amp;rsquo;t comment, though I have always been impressed with what
I&amp;rsquo;ve read from them.&lt;/p&gt;

&lt;p&gt;But since I am not ready to assert that there&amp;rsquo;s a distributed system I know to
be better and simpler than eventually consistent datastores, and since I
certainly know that InnoDB&amp;rsquo;s MVCC implementation is full of complexities, for
right now I am probably in the same position most of my readers are: the two
viable choices seem to be single-node MVCC and multi-node eventual consistency.
And I don&amp;rsquo;t think MVCC is the simpler paradigm of the two.&lt;/p&gt;

&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;

&lt;p&gt;Further reading:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.acolyer.org/2015/09/03/quantifying-isolation-anomalies/&#34;&gt;Adrian Colyer on quantifying isolation
anomalies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aphyr.com/posts/328-call-me-maybe-percona-xtradb-cluster&#34;&gt;Kyle Kingsbury on Galera
Cluster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If you don&amp;rsquo;t &lt;a href=&#34;//twitter.com/xaprb&#34;&gt;tweet&lt;/a&gt; me puns and acid-cat meme pictures about this paragraph, I shall be disappointed in you.&lt;/li&gt;
&lt;li&gt;Pun intended.&lt;/li&gt;
&lt;li&gt;Also note that PostgreSQL used to provide only &lt;em&gt;two&lt;/em&gt; isolation
levels, and the documentation used to make the same comment about it being
the only sensible thing to do. It&amp;rsquo;s not quite clear to me whether this is
meant to imply that it&amp;rsquo;s the only sensible way to implement MVCC, or the only
sensible way to implement PostgreSQL&amp;rsquo;s MVCC.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Pic credits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.flickr.com/photos/digitalmums/6310508350/&#34;&gt;Puzzle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.writerightwords.com/down-the-rabbit-hole/&#34;&gt;Alice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.flickr.com/photos/t_zero/7762560470/&#34;&gt;Schroedinger&amp;rsquo;s Cat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.flickr.com/photos/stuartncook/4613088809/&#34;&gt;Spiral Watch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
    
        <item>
          <title>A Free Tutorial On Go&#39;s Database/SQL Package</title>
          <link>https://www.xaprb.com/blog/2014/12/06/free-tutorial-golang-database-sql/</link>
          <pubDate>Sat, 06 Dec 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2014/12/06/free-tutorial-golang-database-sql/</guid>
          <description>&lt;p&gt;Do you use Google&amp;rsquo;s Go language (golang)? Do you use a relational database such as MySQL
or PostgreSQL with it? Do you want to learn how to?&lt;/p&gt;

&lt;p&gt;Go has a package called &lt;code&gt;database/sql&lt;/code&gt; for connecting to relational databases.
There&amp;rsquo;s package &lt;a href=&#34;http://golang.org/pkg/database/sql/&#34;&gt;documentation&lt;/a&gt;, but you&amp;rsquo;ll
need to read the source code if you really want to understand how to use the
package. The documentation doesn&amp;rsquo;t really explain how to use the package, it
just explains what it does.&lt;/p&gt;

&lt;p&gt;Fortunately, there&amp;rsquo;s a free, online, opensource tutorial that fills this need.
If you haven&amp;rsquo;t read it, I highly recommend it. (I am one of the authors.) There
is a lot of wisdom from very experienced people in the tutorial, including the
two primary authors of the main MySQL driver for Go.&lt;/p&gt;

&lt;p&gt;The tutorial is online at &lt;a href=&#34;http://go-database-sql.org/&#34;&gt;go-database-sql.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tell your friends, please! Friends don&amp;rsquo;t let friends make preventable mistakes
:-)&lt;/p&gt;
</description>
        </item>
    
        <item>
          <title>Why Deployment Freezes Don&#39;t Prevent Outages</title>
          <link>https://www.xaprb.com/blog/2014/11/29/code-freezes-dont-prevent-outages/</link>
          <pubDate>Sat, 29 Nov 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2014/11/29/code-freezes-dont-prevent-outages/</guid>
          <description>&lt;p&gt;I have $10 that says you&amp;rsquo;ve experienced this before: there&amp;rsquo;s a holiday, trade show, or other important event coming up. Management is worried about the risk of an outage during this all-important time, and restricts deployments from the week prior through the end of the event.&lt;/p&gt;

&lt;p&gt;What really happens, of course, is that the system in question becomes booby-trapped with extra risk. As a result, problems are more likely, and when there there is even a slight issue, it has the potential to escalate into a major crisis.&lt;/p&gt;

&lt;p&gt;Why does this happen? As usual, there&amp;rsquo;s no single root cause, but a variety of problems combine to create a brittle, risky situation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.xaprb.com/media/2014/11/freeze.png&#34; alt=&#34;freeze&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;assumptions&#34;&gt;Assumptions&lt;/h3&gt;

&lt;p&gt;When managers declare a freeze, they&amp;rsquo;re not being malicious. They&amp;rsquo;re doing something that seems to make sense. That&amp;rsquo;s why it&amp;rsquo;s important to understand the reasoning.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The goal is simple: prevent breaking something that&amp;rsquo;s working. And a lot of issues seem to trace back to a deployment that breaks a working system, so it&amp;rsquo;s natural to want to avoid a deployment.&lt;/p&gt;

&lt;p&gt;The assumptions, in my experience, are that&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the systems are working now&lt;/li&gt;
&lt;li&gt;systems break because of change&lt;/li&gt;
&lt;li&gt;restricting change will prevent breakage&lt;/li&gt;
&lt;li&gt;the riskiest change is deployment, so restricting deployment eliminates risky change&lt;/li&gt;
&lt;li&gt;potential downsides are less costly than potential outages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unfortunately, the assumptions are wrong, which is why deployment freezes often have the opposite of the intended effect.&lt;/p&gt;

&lt;h3 id=&#34;change-breaks-things&#34;&gt;Change Breaks Things&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s true that change breaks things, but that doesn&amp;rsquo;t tell the whole story. The reality is that systems are always changing, even when you think they&amp;rsquo;re not. And they&amp;rsquo;re also broken. Right now. You just don&amp;rsquo;t know it yet.&lt;/p&gt;

&lt;p&gt;The first great lie is that you can stop systems from changing. You can&amp;rsquo;t stop change. As Charity Majors &lt;a href=&#34;https://twitter.com/mipsytipsy/status/618170448652582912&#34;&gt;tweeted&lt;/a&gt;, the image below is &amp;ldquo;one of the greatest lies in computer science.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.xaprb.com/media/2014/11/nothing-changes.png&#34; alt=&#34;If you do nothing, nothing happens&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Shipping code is &lt;em&gt;not&lt;/em&gt; the only change in a system. Unless the system is turned off completely, it&amp;rsquo;s changing every instant. User requests are being served. Logs are being written. Cron jobs and other scheduled tasks are starting, running, and stopping. The system clock is advancing. There are also dependencies on other systems, which likewise are undergoing constant change. And there are requirements changes, which nobody ever thinks about.&lt;/p&gt;

&lt;p&gt;Most of these changes happen all the time and nothing goes wrong, or humans adjust and fix things as a matter of course. But many of these changes actually expose corner-case bugs or weird problems that just aren&amp;rsquo;t tickled often. As a result, you get the illusion that your systems are not broken. And that&amp;rsquo;s the second great lie, because your systems &lt;em&gt;are&lt;/em&gt; broken. You just don&amp;rsquo;t know it yet.&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s broken? All sorts of things. Your Java runtime has a time bug that&amp;rsquo;s waiting to throw it into an infinite loop when a leap second happens. Your website has a SQL injection vulnerability that nobody&amp;rsquo;s exploited yet. A set of servers that you bought all together and installed at the same time has a ticking time bomb in the RAID controllers, which are all going to go into degraded self-test mode simultaneously. Your auto-increment integer column is  crossing the 2 billion mark right now, and will soon reach its max value.&lt;/p&gt;

&lt;p&gt;The reality is that practically every running system is a ticking time bomb. You just don&amp;rsquo;t know what&amp;rsquo;s ticking or how long till it stops.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.xaprb.com/media/2014/11/clock.jpg&#34; alt=&#34;clock&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;uncontrolled-change-is-more-dangerous&#34;&gt;Uncontrolled Change Is More Dangerous&lt;/h3&gt;

&lt;p&gt;As I said, I&amp;rsquo;m not demonizing your managers. They&amp;rsquo;re actually right to think that deployments are riskier and are likely to cause breaking changes. That&amp;rsquo;s because deployment is often a barely-controlled change.&lt;/p&gt;

&lt;p&gt;Generally, the more automated (scripted) the deployment is, the safer. This is actually not because of the automation, but because of an effect of automation. With automated deployment in place, deployment usually becomes a more frequent process, which tends to exercise, expose, and remove sources of risk to a larger extent.&lt;/p&gt;

&lt;p&gt;So the headline of this section is wrong, in a way. Uncontrolled change isn&amp;rsquo;t what&amp;rsquo;s dangerous. Infrequent change is the problem.&lt;/p&gt;

&lt;p&gt;Wait! Isn&amp;rsquo;t that precisely the opposite of what the managers are asking? Aren&amp;rsquo;t they asking us to freeze deployments &lt;em&gt;in order to slow the pace of change and decrease risk?&lt;/em&gt;  Yep, that&amp;rsquo;s right. Their intuition is actually the reverse of the truth: to make the systems safer, they should be encouraging more deployments, not fewer.&lt;/p&gt;

&lt;p&gt;Deplyoment freezes actually add risk. But that&amp;rsquo;s not all. The deployoment freeze sets in place a vicious cycle that includes a couple of other effects and spirals down and down. Watch as I show you how the deplyoment freeze is only the first step in how we ambush the operations engineers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.xaprb.com/media/2014/11/raccoon.jpg&#34; alt=&#34;excellent smithers&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;you-can-t-freeze-deployments&#34;&gt;You Can&amp;rsquo;t Freeze Deployments&lt;/h3&gt;

&lt;p&gt;Freezes never, but &lt;em&gt;never&lt;/em&gt;, work. You can declare a freeze, but you can&amp;rsquo;t make it happen.&lt;/p&gt;

&lt;p&gt;This follows naturally from the inability to actually stop the systems from changing. Systems that change are going to break, and you have to respond to this.&lt;/p&gt;

&lt;p&gt;There are other effects, too. Requirements change, for example. The catalog merchants went to the marketers and decided to offer a special promo. Buy a tablet and a case in combination with a warranty, and get a bluetooth keyboard free! Sounds great; we&amp;rsquo;ll make a bundle &amp;ndash; let&amp;rsquo;s print and ship those catalogs. Just in time for the holidays! Whoops, nobody told IT about this. Catalogs are printed already. We&amp;rsquo;ve got two weeks and there&amp;rsquo;s no going back; we need the order-entry system and the website to support this promo. Bingo; forced change.&lt;/p&gt;

&lt;p&gt;Whether it&amp;rsquo;s a promo or a bugfix, something always has to be changed. So we always have to break the rule. This is why the rule inevitably ends up being &lt;em&gt;no deployments except for emergency changes.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is getting good. What&amp;rsquo;s riskier than a change? An emergency change. What&amp;rsquo;s riskier still? Undeployed code!&lt;/p&gt;

&lt;h3 id=&#34;undeployed-code-is-inventory-inventory-is-risk&#34;&gt;Undeployed Code Is Inventory; Inventory Is Risk&lt;/h3&gt;

&lt;p&gt;The process of developing and deploying code is really a process of forking and merging your codebase. A developer writes a new version of the application, which diverges from what&amp;rsquo;s running in production. The developer then merges it back in and deploys it to production, resolving the differences.&lt;/p&gt;

&lt;p&gt;There are at least two key points where &lt;em&gt;inventory&lt;/em&gt; of risk builds up in this process. The first is when the developer&amp;rsquo;s codebase isn&amp;rsquo;t merged into the main code yet. The longer this waits, and the more the code diverges, the riskier. Secondly, after merging and before deployment.&lt;/p&gt;

&lt;p&gt;Code that has been merged and not deployed is a loaded gun. If I merge in my changes and don&amp;rsquo;t deploy them, and you then merge and deploy yours, you&amp;rsquo;ve just deployed mine too. This was more than you bargained for. It&amp;rsquo;s now more likely that your deployment will break something, and harder for you to fix if it does.&lt;/p&gt;

&lt;p&gt;In a deployment freeze, two important things happen.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Lots of latent changes build up, ready to break the whole world when the freeze is lifted. &lt;em&gt;There is increasing risk of breaking the system after the freeze.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Every developer&amp;rsquo;s codebase, and knowledge of the codebase, is diverging from production. Development and QA environments typically are, too. As a result, when emergency changes have to be applied to production during the freeze, breakage is much more likely. &lt;em&gt;There is increasing risk of breaking the system during the freeze.&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;frozen-systems-are-inoperable&#34;&gt;Frozen Systems are Inoperable&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ve seen that the tip of the codebase is where the least risk has accumulated. The tip is where things work best. Frozen systems get further behind this tip, and therefore much riskier.&lt;/p&gt;

&lt;p&gt;Infrastructure is code, too. Frozen systems also become incompatible with the current tip of environment configuration and infrastructure automation code. The result is that emergency deployments are often done outside of normal change control procedures, and the usual automation and deployment code can&amp;rsquo;t be used.&lt;/p&gt;

&lt;p&gt;To illustrate this problem, consider that app code and automation code are usually separate, although there is a dependency. This dependency is not properly versioned most of the time. Is your Puppet code version-controlled in lockstep with your application code, such that if you want to deploy a stale version of the app code, the deployment process will check out and use the older Puppet code? Would this even work, if it were possible &amp;ndash; can you just run old Puppet code on systems that have been advanced forward? The answer to both of these questions is likely no.&lt;/p&gt;

&lt;p&gt;Imagine trying to drive your car without all the usual help you get from it: no mirrors, no gauges, no power steering, no power brakes. A car with all these things disabled is largely inoperable for most people.&lt;/p&gt;

&lt;p&gt;A system that&amp;rsquo;s stale in production for a month, while developers work actively on a bunch of unshipped changes, is in a similar state. Important controls, indicators, and assists are disabled. It&amp;rsquo;s largely inoperable.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve seen that a deployment freeze can&amp;rsquo;t prevent the need for changes. Now we see that it forces the inevitable changes to be done in a much more dangerous way, seriously increasing the risk of problems. Looks like the freeze is not preventing the risk of an outage as intended!&lt;/p&gt;

&lt;h3 id=&#34;the-cost-of-deployment-freezes&#34;&gt;The Cost Of Deployment Freezes&lt;/h3&gt;

&lt;p&gt;The assumption is that the downsides of a deployment freeze are outweighed by the benefit of avoiding outages. I&amp;rsquo;m arguing that the benefit is much smaller than expected, and may even be negative. What about the costs?&lt;/p&gt;

&lt;p&gt;Deployment freezes have a huge productivity cost. Huge.&lt;/p&gt;

&lt;p&gt;When you can&amp;rsquo;t deploy, you can&amp;rsquo;t resolve the temporary tension in the system that results from changes that aren&amp;rsquo;t merged or deployed. Many changes you make while developing the system have to go through a compatibility lifecycle: to mutate from state A to B, you must first go to AB, which is backwards compatible with A and forward compatible with B. Then you move from AB to B.&lt;/p&gt;

&lt;p&gt;A simple example is adding a column to a table. You make sure the code ignores new columns, add the column with a default value, then make the code recognize and work with the new column, then remove the default value once it&amp;rsquo;s no longer needed.&lt;/p&gt;

&lt;p&gt;This kind of compatibility lifecycle represents a set of &lt;em&gt;dependencies&lt;/em&gt; across time. If you&amp;rsquo;ve read The Goal, you know dependencies are bad for workflow. These dependencies become blockers for developers working on the code, and even for other developers and operations staff. If the dependencies are short-lived, it often isn&amp;rsquo;t too bad. This is the case when you deploy a dozen times a day. But if the dependencies become long-lived, large portions of engineering slows down or stops completely. Projects have to be shelved until things can be deployed. Meanwhile, work that&amp;rsquo;s been done on these projects becomes stale and creates conflicts with alternative work. It often has to be reworked later.&lt;/p&gt;

&lt;p&gt;What was a local change and dependency becomes, given a little more time, a global blocker and waste of work.&lt;/p&gt;

&lt;p&gt;This scenario is practically certain to happen. Deployment freezes crush productivity, often long beyond the duration of the freeze itself.&lt;/p&gt;

&lt;h3 id=&#34;what-about-feature-freezes&#34;&gt;What About Feature Freezes?&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s fairly common for large, complex, fast-moving systems to declare feature freezes in preparation for a major release. (Think of versions of operating systems or databases, for example.) However, this is different from a deployment freeze in a web appication.&lt;/p&gt;

&lt;p&gt;The most important difference is that a deployment freeze is an attempt to branch the infrastructure, code/app, data, system state, and activity (customers/users). This is not branching one thing, but many interdependent things. This is practically impossible to do.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Frozen systems can run as-is briefly, but then pressure to change them mounts steeply. The system grows stale, but things change anyway and force changes. These changes become much more difficult and dangerous, and the likelihood of an outage grows quickly.&lt;/p&gt;

&lt;p&gt;Code freezes thus make systems more likely to break, while impacting productivity. Both the cost and the risk are much worse than intuition would suggest.&lt;/p&gt;

&lt;p&gt;I believe that a focus on improving the processes by which changes are made, making smaller and more frequent iterations, and finding out and fixing breakage as soon as possible is a better way to the goal. But that&amp;rsquo;s a different article&lt;/p&gt;

&lt;p&gt;What have your experiences been? Let me know in the comments.&lt;/p&gt;

&lt;p&gt;Image credits: &lt;a href=&#34;http://www.imdb.com/title/tt0118688/&#34;&gt;freeze&lt;/a&gt;, &lt;a href=&#34;https://www.flickr.com/photos/jlhopgood/6795353385/&#34;&gt;clock&lt;/a&gt;, &lt;a href=&#34;http://memegenerator.net/instance/53212554&#34;&gt;raccoon&lt;/a&gt;&lt;/p&gt;</description>
        </item>
    
        <item>
          <title>A Review Of The Docker Book</title>
          <link>https://www.xaprb.com/blog/2014/07/14/the-docker-book/</link>
          <pubDate>Mon, 14 Jul 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2014/07/14/the-docker-book/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;http://www.dockerbook.com/&#34;&gt;The Docker Book&lt;/a&gt; is a newly published book from
James Turnbull, whose name you will recognize if you&amp;rsquo;re at all familiar with
DevOps, Puppet, or Docker itself. It&amp;rsquo;s a nice introduction to what Docker is and
how to get started using it. It&amp;rsquo;s like Goldilocks &amp;mdash; not too detailed, not too
superficial, just right.&lt;/p&gt;

&lt;p&gt;The book starts from the basics, assuming no prior knowledge with Docker, or
even most of the core concepts of virtualization, but moves quickly through
these topics into installing Docker and getting started with it. The important
and useful tasks &amp;mdash; starting, stopping, interacting with containers, running
containers as daemons, and so on &amp;mdash; are all covered in the right amount of
detail.&lt;/p&gt;

&lt;p&gt;After this, the book switches into building your own images and using them for
real things. There&amp;rsquo;s a couple chapters dedicated to some sample applications.
These aren&amp;rsquo;t silly hello-world applications, either &amp;mdash; we&amp;rsquo;re talking about
real, useful apps, like your own continuous integration system running Jenkins CI.&lt;/p&gt;

&lt;p&gt;The final two chapters are about using the Docker API, getting help, and
extending and contributing to Docker itself (it&amp;rsquo;s opensource, of course).&lt;/p&gt;

&lt;p&gt;So what do I think? First, great job James. I know it&amp;rsquo;s a lot of work to write a
book like this (275 pages). Second, since Docker is very new, obviously things
are going to change a lot, and in my opinion James has gone into just the right
level of detail, keeping that in mind. The book doesn&amp;rsquo;t feel bleeding-edge to
me, though. It&amp;rsquo;s pretty well thought-out and professionally written, clear and
concise. I have a feeling it will get a lot deeper and more detailed in future
editions, but right now it&amp;rsquo;s a great way to get started with Docker!&lt;/p&gt;
</description>
        </item>
    
        <item>
          <title>Mac&#39;s Time Machine and Symlinks</title>
          <link>https://www.xaprb.com/blog/2014/07/07/mac-time-machine-links/</link>
          <pubDate>Mon, 07 Jul 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2014/07/07/mac-time-machine-links/</guid>
          <description>&lt;p&gt;I use Mac OSX&amp;rsquo;s built-in Time Machine for backups, and a couple of times I&amp;rsquo;ve
noticed my backups failed and couldn&amp;rsquo;t be completed successfully. I was unable
to fix the problem until I reformatted the backup drive. Today I think I
stumbled on the solution.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.xaprb.com/media/2014/07/time-machine.jpg&#34; alt=&#34;Time Machine&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The problem seems to come from swapping a directory and a symlink to it. I had a
set of directories with symlinks back and forth, and sometimes I moved the
directory to where the symlink was and made a symlink to it from where it used
to be. That seems to confuse Time Machine mightily.&lt;/p&gt;

&lt;p&gt;Just removing both the symlink and the directory seems to &amp;ldquo;fix&amp;rdquo; it. Well&amp;hellip;
maybe it&amp;rsquo;s not a fix, but it&amp;rsquo;s better than the nuclear option of reformatting
the backup drive.&lt;/p&gt;

&lt;p&gt;Hope this helps someone.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.flickr.com/photos/24071429@N08/2309369605/&#34;&gt;Photo Credit&lt;/a&gt;&lt;/p&gt;</description>
        </item>
    
        <item>
          <title>Unfixable Code</title>
          <link>https://www.xaprb.com/blog/2014/06/21/unfixable-code/</link>
          <pubDate>Sat, 21 Jun 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2014/06/21/unfixable-code/</guid>
          <description>&lt;p&gt;Over the years I&amp;rsquo;ve come to believe something that I&amp;rsquo;m not sure others will
agree with. I would like to hear your point of view on it.&lt;/p&gt;

&lt;p&gt;I posit that some code can become literally unfixable. Programmers can paint
themselves into a corner with the code and it becomes impossible to get out
again.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.xaprb.com/media/2014/06/humpty.jpg&#34; alt=&#34;humpty&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The scenario arises when a specific set of conditions exists:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the code is difficult to work with for some reason &amp;mdash; inherent complexity, badly written code, whatever&lt;/li&gt;
&lt;li&gt;the code is not tested and is not written to be testable&lt;/li&gt;
&lt;li&gt;bugs are high-stakes, so changes are extremely risky&lt;/li&gt;
&lt;li&gt;the code needs to be changed for some reason (it&amp;rsquo;s buggy or doesn&amp;rsquo;t fulfill its requirements)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This situation is a deadlock. I can&amp;rsquo;t leave the code as it is, because it
has bugs that are causing problems that need to be fixed. I can&amp;rsquo;t change the
code, or I&amp;rsquo;ll cause bugs that may be truly serious in a variety of ways. I can&amp;rsquo;t
test the code, because it&amp;rsquo;s untestable the way it&amp;rsquo;s written. I can&amp;rsquo;t refactor it
to be testable for the same reasons I can&amp;rsquo;t just change it in the first place.&lt;/p&gt;

&lt;p&gt;I have encountered such code many times in my career. I&amp;rsquo;ve also met people who
say they can fix any code with enough work. I haven&amp;rsquo;t seen that happen. The only
solution I&amp;rsquo;ve seen is a complete replacement, rewriting from scratch.&lt;/p&gt;

&lt;p&gt;What do you think?&lt;/p&gt;

&lt;p&gt;PS: I remember seeing claims that if more than a small amount (10% or so, as I
recall?) of a program&amp;rsquo;s code needs to be modified, a rewrite from scratch will
be a better outcome in less time. If you can find any sources for that claim,
please leave them in the comments.&lt;/p&gt;</description>
        </item>
    
        <item>
          <title>Can Anomaly Detection Solve Alert Spam?</title>
          <link>https://www.xaprb.com/blog/2014/06/02/can-anomaly-detection-solve-alert-spam/</link>
          <pubDate>Mon, 02 Jun 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2014/06/02/can-anomaly-detection-solve-alert-spam/</guid>
          <description>&lt;p&gt;Anomaly detection is all the buzz these days in the &amp;ldquo;#monitoringlove&amp;rdquo; community.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.xaprb.com/media/2014/06/anomaly.jpg&#34; alt=&#34;anomaly&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The conversation usually goes something like the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Alerts are spammy and often generate false positives.&lt;/li&gt;
&lt;li&gt;What you really want to know is when something anomalous is happening.&lt;/li&gt;
&lt;li&gt;Anomaly detection can replace static thresholds and heuristics.&lt;/li&gt;
&lt;li&gt;The result will be better accuracy and lower noise.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;m going to give a &lt;a href=&#34;https://vividcortex.com/anomaly-detection-webinar/&#34;&gt;webinar about the science of statistical anomaly detection on June 17th&lt;/a&gt;. Sorry, no spoilers will be given here. You&amp;rsquo;ll have to attend the webinar to find out what I think on the above topics.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.flickr.com/photos/matthileo/3888057995/&#34;&gt;Pic Credit&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
    
        <item>
          <title>Can MySQL be a 12-factor service?</title>
          <link>https://www.xaprb.com/blog/2014/05/10/can-mysql-be-12factor-service/</link>
          <pubDate>Sat, 10 May 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2014/05/10/can-mysql-be-12factor-service/</guid>
          <description>&lt;p&gt;A while ago I &lt;a href=&#34;https://www.xaprb.com/blog/2012/04/24/the-mysql-init-script-mess/&#34;&gt;wrote&lt;/a&gt; about some of the things that can make MySQL unreliable or hard to operate. Some time after that, in a completely unrelated topic, someone made me aware of a set of principles called &lt;a href=&#34;http://12factor.net&#34;&gt;12-factor&lt;/a&gt; that I believe originated from experiences building Heroku.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.xaprb.com/media/2014/05/dodecahedron.jpg&#34; alt=&#34;Dodecahedron&#34; /&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s been over a year, and I&amp;rsquo;ve come to increasingly agree with the 12-factor principles. I guess I&amp;rsquo;m extremely late to the party, but making applications behave in 12-factor-compliant ways has solved a lot of problems for me.&lt;/p&gt;

&lt;p&gt;This experience has repeatedly reminded me of one of the applications that continues to cause a lot of the kinds of pain that the 12-factor principles have solved for me: MySQL.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Example: configuration files. I initially thought MySQL&amp;rsquo;s technique of multiple configuration files that serve as defaults, overrides to the defaults, and eventually are overridden by the commandline options was a good thing. In fact, you can blame me for that pattern being imitated in Percona Toolkit, if you want to blame anyone for it.&lt;/p&gt;

&lt;p&gt;But then I started to see the problems with it. Quick question: how easy is it to set up multiple MySQL instances on the same server, in your opinion? Had any problems with that? Any unexpected things ever happen to you?&lt;/p&gt;

&lt;p&gt;12-factor solves many of the types of problems I&amp;rsquo;ve had with that. For example, I once needed multiple instances of an API server on a single operating system host. This was very difficult because of conflicts with configuration files and init scripts, which I&amp;rsquo;d created by copying the way MySQL does things. Moving the configuration into the environment variables solved most of those problems and helped solve others.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t necessarily expect anyone to understand this unless they&amp;rsquo;ve had first-hand experience with it. After all, I didn&amp;rsquo;t until I got that experience myself. I know a lot of people believe fully in the results of following 12-factor principles, so I won&amp;rsquo;t spend time trying to explain it here.&lt;/p&gt;

&lt;p&gt;Thought experiment: how hard would it be to make MySQL accept all of its configuration as environment variables? I think it would be feasible to make a wrapper that reads the environment variables and exec&amp;rsquo;s &lt;code&gt;mysqld&lt;/code&gt; with the resulting options. But if MySQL could be configured via environment variables directly, that&amp;rsquo;d be even nicer. (I can&amp;rsquo;t think of an environment variable it respects at the moment, other than &lt;code&gt;TZ&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t propose blindly following 12-factor principles. They are most applicable to stateless or little-state applications, such as API servers or web applications. They are harder to use with attachable stateful resources, such as a database server. But even a system like MySQL could sometimes be improved, with regards to operational characteristics, by following 12-factor principles.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.flickr.com/photos/sanchtv/4192677571&#34;&gt;Pic&lt;/a&gt;&lt;/p&gt;</description>
        </item>
    
        <item>
          <title>Monitorama 2014: This One Weird Time-Series Math Trick</title>
          <link>https://www.xaprb.com/blog/2014/05/06/one-weird-time-series-math-trick/</link>
          <pubDate>Tue, 06 May 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2014/05/06/one-weird-time-series-math-trick/</guid>
          <description>&lt;p&gt;Monitorama 2014 Portland has been a great show. I&amp;rsquo;ve enjoyed the technical
nature of the talks, the diversity of the speakers, the topics from hilarious to
thought-provoking, and the stage in a theater, set up for a Shakespearean
tragedy.&lt;/p&gt;

&lt;p&gt;I have also taken a lot of notes. For example, Toufic from Metafor Software
suggested that the audience look into the Kolmogorov-Smirnov test. I am proud of
the slide that made its way into my talk as a result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.xaprb.com/media/2014/05/smirnov.jpg&#34; alt=&#34;Smirnov&#34; /&gt;&lt;/p&gt;

&lt;p&gt;My slides are embedded below. Enjoy. I&amp;rsquo;ve also uploaded an &lt;a href=&#34;https://www.xaprb.com/media/2014/05/time-series-tricks.xlsx&#34;&gt;Excel spreadsheet&lt;/a&gt; you
can use to tinker with the math and reproduce my results. Let me know if I did
anything wrong, please!&lt;/p&gt;

&lt;iframe src=&#34;https://app.box.com/embed_widget/hnd0llg8tzut/s/o60h3cxbp5fa1u5jw1pu?view=list&amp;sort=name&amp;direction=ASC&amp;theme=blue&#34; width=&#34;500&#34; height=&#34;400&#34; frameborder=&#34;0&#34; allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen&gt;&lt;/iframe&gt;
</description>
        </item>
    
        <item>
          <title>GopherCon 2014</title>
          <link>https://www.xaprb.com/blog/2014/05/04/gophercon-2014/</link>
          <pubDate>Sun, 04 May 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2014/05/04/gophercon-2014/</guid>
          <description>&lt;p&gt;I spoke at &lt;a href=&#34;http://gophercon.com/&#34;&gt;Gophercon&lt;/a&gt; last week in Denver, and it was one of the best
conferences I&amp;rsquo;ve attended. I can&amp;rsquo;t remember learning so much and meeting so many
great people in years. I have page after page of notes in my notebook, many of
which I&amp;rsquo;ve yet to follow up on. The conference prompted a burst of learning and
a flurry of creativity for me, as well as a huge list of things to study
further.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.xaprb.com/media/2014/05/gophercon.png&#34; alt=&#34;Gophercon&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In no particular order, here are some of the many highlights for me:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Meeting some of the Go team. Most of the people I&amp;rsquo;ve been interacting with or
following online were there, although I didn&amp;rsquo;t get to meet all of them in
person.&lt;/li&gt;
&lt;li&gt;Meeting many of the super-smart people whose code, blogs, and emails have
taught me so much over the last couple of years.&lt;/li&gt;
&lt;li&gt;Learning a lot about Go&amp;rsquo;s internals and design. For example, although it seems
obvious in hindsight, I had never really thought about the &lt;code&gt;select&lt;/code&gt; statement
as the heart of Go&amp;rsquo;s concurrency model &amp;ndash; but it is. Everything else in Go
seems to get the attention (channels, goroutines, etc), and is copied in
various languages, but &lt;code&gt;select&lt;/code&gt; is really the crowning jewels and is unique as
far as I know.&lt;/li&gt;
&lt;li&gt;The talks. I haven&amp;rsquo;t listened to talks so intently for many years. I was able
to attend all but two. Fortunately those were recorded and will be online
soon. The speakers were so good that I truthfully started to get an insecurity
complex about my own presentation. I could just list all of the talks, and I
don&amp;rsquo;t want to pick favorites, but if you must watch only a couple &amp;ndash;
watch &lt;a href=&#34;http://talks.golang.org/2014/hellogophers.slide&#34;&gt;Rob Pike&lt;/a&gt;, &lt;a href=&#34;http://talks.golang.org/2014/go4gophers.slide&#34;&gt;Andrew Gerrand&lt;/a&gt;, John Graham, Kelsey Hightower, Ben
Johnson, Peter Bourgon, Alan Shreve, Richard Crowley, oh dear that&amp;rsquo;s more than
a few. If you use or are curious about Go, you &lt;em&gt;must&lt;/em&gt; watch the first two.
The slides are good to read, but you are missing 80% of the talk if that&amp;rsquo;s all
you make time for.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I was going to write a pretty long retrospective about Gophercon, but another
amazing Gopher &lt;a href=&#34;http://influxdb.org/blog/2014/04/30/java-is-the-cobol-of-my-generation-and-go-is-its-successor.html&#34;&gt;already did that&lt;/a&gt; (update: &lt;a href=&#34;http://blog.joshsoftware.com/2014/05/05/my-experience-at-the-awesome-first-ever-gophercon-2014/&#34;&gt;another one&lt;/a&gt;).  I encourage you to read it, as it will
give you a good sense of the conference and Go, and how they fit together.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll leave you with some pithy quotes that summarize the depth of the content
and quality of the hallway track at this conference:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;I will now boot this virtual machine from my slideshow.&amp;rdquo; - Kelsey Hightower.  Note: this is not a joke; he PXE-booted the box using a server program that was running from his slideshow, which was written in Go and ran a Go PXE server. A few minutes later he booted another virtual machine from the first machine that booted from his slideshow.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;It&amp;rsquo;s turtles all the way down and Handler all the way up.&amp;rdquo; - Richard Crowley, on building HTTP API services by composition using the &lt;code&gt;net/http&lt;/code&gt; libraries.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Interfaces separate data from behavior. Classes conflate the two.&amp;rdquo; - Andrew Gerrand, on the difference between programming with composition versus inheritance.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Go is profoundly different.&amp;rdquo; - Rob Pike, addressing the common misconception that Go is little more than an elegant version of C&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Go has generics. They are called interfaces.&amp;rdquo; - Rob Pike, not speaking in jest&lt;/li&gt;
&lt;li&gt;&amp;ldquo;The only decison no one has second-guessed is writing this in Go.&amp;rdquo; - Josh Bleecher Snyder&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, if you would like to write Go professionally, &lt;a href=&#34;https://vividcortex.com/&#34;&gt;VividCortex&lt;/a&gt; is
hiring!&lt;/p&gt;</description>
        </item>
    
        <item>
          <title>Go MySQL Drivers</title>
          <link>https://www.xaprb.com/blog/2014/04/29/golang-mysql-drivers/</link>
          <pubDate>Tue, 29 Apr 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2014/04/29/golang-mysql-drivers/</guid>
          <description>&lt;p&gt;If you&amp;rsquo;re interested in Google&amp;rsquo;s Go programming language, perhaps you aren&amp;rsquo;t
sure what drivers to use for MySQL. The good news is there are &lt;em&gt;excellent&lt;/em&gt;
drivers for MySQL.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.xaprb.com/media/2014/04/dolphin.jpg&#34; alt=&#34;Dolphin&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There are several opensource ones on GitHub and elsewhere,
but the driver I recommend is
&lt;a href=&#34;https://github.com/go-sql-driver/mysql/&#34;&gt;https://github.com/go-sql-driver/mysql/&lt;/a&gt;.
Why?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is pure Go, not a wrapper around a C library, and is liberally licensed.&lt;/li&gt;
&lt;li&gt;It is high performance. A lot of work has gone into making it avoid
allocations and consume minimal CPU.&lt;/li&gt;
&lt;li&gt;It is an excellent example of idiomatic Go in action. The authors understand
how the &lt;code&gt;database/sql&lt;/code&gt; package is supposed to be used. Some drivers aren&amp;rsquo;t
written to this standard and are clumsy or don&amp;rsquo;t take advantage of
&lt;code&gt;database/sql&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the driver we use at VividCortex in production. We have had no issues
with this driver at all. Credit for that should go to three people who&amp;rsquo;ve put a
large amount of work into it: Julien Schmidt, Arne Hormann, and Brad
Fitzpatrick. There are more, but those are the key contributors in my opinion.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re curious how to write idiomatic Go code when accessing a database
through the &lt;code&gt;database/sql&lt;/code&gt; package with this driver, I recommend
&lt;a href=&#34;http://go-database-sql.org/&#34;&gt;http://go-database-sql.org/&lt;/a&gt;, which has benefited
greatly from the same contributors, as well as a variety of community members
and experts at VividCortex.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.flickr.com/photos/chrismatos/8125817490/&#34;&gt;Photo Credit&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
    
        <item>
          <title>Ultima Online and the History of Sharding</title>
          <link>https://www.xaprb.com/blog/2014/04/21/ultima-online-sharding/</link>
          <pubDate>Mon, 21 Apr 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2014/04/21/ultima-online-sharding/</guid>
          <description>&lt;p&gt;Have you heard of &lt;em&gt;sharding&lt;/em&gt; a database? Of course you have. Do you know where
the term comes from? Someone asked me this at a cocktail party recently. I gave
it my best shot.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;The earliest I remember was Google engineers using it to describe the
architecture of some things,&amp;rdquo; I said. &amp;ldquo;That would have been about 2006.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Nope. Much earlier than that,&amp;rdquo; said my new friend.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.xaprb.com/media/2014/04/ultima.jpg&#34; alt=&#34;ultima&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I pondered. &amp;ldquo;Well, I guess there was the famous LiveJournal architecture
article about MySQL. That was, I dunno, 2003?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;The person then told me the following history. I can neither
confirm nor deny it; what do you know about it?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Years ago there was a game called &lt;em&gt;Ultima Online&lt;/em&gt;. It&amp;hellip;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I broke in. &amp;ldquo;Hey! In 1995 my brother and I were staff members at a Boy Scout
Camp, and one of the other staff members had a game called Ultima Underworld on
his PC. It was addictive. Any relationship?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Yes, it was a predecessor to Ultima Online.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Oh,&amp;rdquo; I said. &amp;ldquo;Well, that&amp;rsquo;s basically the last game I&amp;rsquo;ve ever played.
But please go on.&amp;rdquo;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ultima Online was early in the Internet age &amp;ndash; late nineties, I think. They
knew they were going to have a lot more traffic than they could handle with
one server, no matter how big it was. The only solution that presented itself
was to run lots of small instances of the game. But that would impact the game
play itself. What to do?&lt;/p&gt;

&lt;p&gt;The answer was to work it into the storyline of the game itself. The world in
the game was said to have been broken into shards. Not the database &amp;ndash; the
world itself. That was part and parcel of the game. Some gemstone had been
broken into shards and reality was broken along with it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;True? False? It&amp;rsquo;s easy to verify that the storyline is true, but is this how we
ended up with &amp;ldquo;sharding&amp;rdquo; in the database world, especially in MySQL?&lt;/p&gt;

&lt;p&gt;Note: I&amp;rsquo;m paraphrasing the conversation from the cocktail party. My memory isn&amp;rsquo;t
that good.&lt;/p&gt;</description>
        </item>
    
        <item>
          <title>Switching from Sublime Text back to Vim</title>
          <link>https://www.xaprb.com/blog/2014/04/15/sublime-text-vim-go/</link>
          <pubDate>Tue, 15 Apr 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2014/04/15/sublime-text-vim-go/</guid>
          <description>&lt;p&gt;I&amp;rsquo;ve used Vim for as long as I can remember, but when I started to work with Go
at VividCortex, for some reason I started to use Sublime Text instead. It does
make a very nice GUI-based editor, but I never felt that it was as powerful as
Vim.&lt;/p&gt;

&lt;p&gt;Ever notice how the Vim logo looks a little like Superman&amp;rsquo;s logo? No? Squint a
little harder, then.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.xaprb.com/media/2014/04/superman.jpg&#34; alt=&#34;Superman&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;I think the thing that made me start using Sublime Text was the nice IDE-like code completion and
other features, which are easy to install with a package called GoSublime. I was
aware that these are also available in Vim, but when I tried, the configuration
seemed to be a little bit complicated, and I didn&amp;rsquo;t get quite the experience I
wanted. For example, when I set up Vim to run &lt;code&gt;gofmt&lt;/code&gt; on save, it moved my
cursor back to the top of the file and reset my undo history. Chasing down the
last little bits of this customization would have taken me some time and I was
lazy.&lt;/p&gt;

&lt;p&gt;Recently I discovered &lt;a href=&#34;https://github.com/fatih/vim-go&#34;&gt;vim-go&lt;/a&gt;, which lets me remain lazy and ignorant of how
my preferred editor really works, while getting an IDE experience in Vim that
rivals any I&amp;rsquo;ve had outside of a real IDE (I&amp;rsquo;m thinking of Visual Studio here,
for example).&lt;/p&gt;

&lt;p&gt;Setup was really trivial. I found the instructions quite good. This &lt;a href=&#34;http://blog.gopheracademy.com/vimgo-development-environment&#34;&gt;blog
post&lt;/a&gt; is a good overview.&lt;/p&gt;

&lt;p&gt;Now I seem to have the best of both worlds, and I&amp;rsquo;m back to a true text-based
terminal editor again.&lt;/p&gt;</description>
        </item>
    
        <item>
          <title>Bloom Filters Made Easy</title>
          <link>https://www.xaprb.com/blog/2014/02/11/bloom-filters/</link>
          <pubDate>Tue, 11 Feb 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2014/02/11/bloom-filters/</guid>
          <description>&lt;p&gt;I mentioned Bloom Filters in my talk today at &lt;a href=&#34;http://strataconf.com/strata2014/public/schedule/speaker/142&#34;&gt;Strata&lt;/a&gt;. Afterwards, someone
told me it was the first time he&amp;rsquo;d heard of Bloom Filters, so I thought I&amp;rsquo;d
write a little explanation of what they are, what they do, and how they work.&lt;/p&gt;

&lt;p&gt;But then I found that &lt;a href=&#34;http://www.jasondavies.com/bloomfilter/&#34;&gt;Jason Davies already wrote a great article&lt;/a&gt; about
it. Play with his live demo. I was able to get a false positive through luck in
a few keystrokes: add alice, bob, and carol to the filter, then test the filter
for candiceaklda.&lt;/p&gt;

&lt;p&gt;Why would you use a Bloom filter instead of, say&amp;hellip;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Searching the data for the value? Searching the data directly is too slow,
especially if there&amp;rsquo;s a lot of data.&lt;/li&gt;
&lt;li&gt;An index? Indexes are more efficient than searching the whole dataset, but
still too costly. Indexes are designed to minimize the number of times some
data needs to be fetched into memory, but in high-performance applications,
especially over huge datasets, that&amp;rsquo;s still bad. It typically represents
random-access to disk, which is catastrophically slow and doesn&amp;rsquo;t scale.&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
    
        <item>
          <title>Generating Realistic Time Series Data</title>
          <link>https://www.xaprb.com/blog/2014/01/24/methods-generate-realistic-time-series-data/</link>
          <pubDate>Fri, 24 Jan 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2014/01/24/methods-generate-realistic-time-series-data/</guid>
          <description>&lt;p&gt;I am interested in compiling a list of techniques to generate fake time-series
data that looks and behaves realistically. The goal is to make a mock API for
developers to work against, without needing bulky sets of real data, which are
annoying to deal with, especially as things change and new types of data are
needed.&lt;/p&gt;

&lt;p&gt;To achieve this, I think several specific things need to be addressed:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What common classes or categories of time-series data are there? For example,

&lt;ul&gt;
&lt;li&gt;cyclical (ex: traffic to a web server day-over-day)&lt;/li&gt;
&lt;li&gt;apparently random (ex: stock ticker)&lt;/li&gt;
&lt;li&gt;generally increasing (ex: stock ticker for an index)&lt;/li&gt;
&lt;li&gt;exponentially decaying (ex: unix load average)&lt;/li&gt;
&lt;li&gt;usually zero, with occasional nonzero values (ex: rainfall in a specific location)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;What parameters describe the data&amp;rsquo;s behavior? Examples might include an
exponential decay, periodicity, distribution of values, distribution of
intervals between peaks, etc.&lt;/li&gt;
&lt;li&gt;What techniques can be used to deterministically generate data that
approximates a given category of time-series data, so that one can generate
mock sources of data without storing real examples? For a simplistic example,
you could seed a random number generator for determinism, and use something
like &lt;code&gt;y_n = rand() * 10 + 100&lt;/code&gt; for data that fluctuates randomly between 90 and
100.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To make the mock API, I imagine we could catalog a set of metrics we want to
be able to generate, with the following properties for each:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;name&lt;/li&gt;
&lt;li&gt;type&lt;/li&gt;
&lt;li&gt;dimensions&lt;/li&gt;
&lt;li&gt;parameters&lt;/li&gt;
&lt;li&gt;random seed or other initializer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This reduces the problem from what we currently do (keeping entire data sets,
which need to be replaced as our data gathering techniques evolve) into just a
dictionary of metrics and their definitions.&lt;/p&gt;

&lt;p&gt;Then the mock API would accept requests for a set of metrics, the time range
desired, and the resolution desired. The metrics would be computed and returned.&lt;/p&gt;

&lt;p&gt;To make this work correctly, the metrics need to be generated deterministically.
That is, if I ask for metrics from 5am to 6am on a particular day, I should
always get the same values for the metrics. And if I ask for a different time
range, I&amp;rsquo;d get different values. What this means, in my opinion, is that there
needs to be a closed-form function that produces the metric&amp;rsquo;s output for a given
timestamp. (I think one-second resolution of data is fine enough for most
purposes.)&lt;/p&gt;

&lt;p&gt;Does anyone have suggestions for how to do this?&lt;/p&gt;

&lt;p&gt;The result will be open-sourced, so everyone who&amp;rsquo;s interested in such a
programmatically generated dataset can benefit from it.&lt;/p&gt;
</description>
        </item>
    
        <item>
          <title>Continuous integration and deployment</title>
          <link>https://www.xaprb.com/blog/2013/10/16/continuous-integration-and-deployment/</link>
          <pubDate>Wed, 16 Oct 2013 00:00:00 UTC</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2013/10/16/continuous-integration-and-deployment/</guid>
          <description>&lt;p&gt;I&amp;rsquo;ve been talking to some smart people about deployment. First a little background. One of my colleagues was working on a project that ultimately didn&amp;rsquo;t bear fruit. It was a system for continuous delivery, and involved reacting to &lt;code&gt;git push&lt;/code&gt; by building and shipping to production. But it felt as if the problem shouldn&amp;rsquo;t be separated from provisioning, and from setting up a development environment, and so these things got folded in, and the effort became a boil-the-ocean project that had to be set aside.&lt;/p&gt;

&lt;p&gt;During this process I came to appreciate my colleague&amp;rsquo;s point of view on topics such as how software should be deployed and how it should be designed to run in its environment. A lot of this is encapsulated in &lt;a href=&#34;http://12factor.net/&#34;&gt;The Twelve Factors&lt;/a&gt;. In fact, I actually created and deployed to a Heroku app, and experienced firsthand why people love Heroku.&lt;/p&gt;

&lt;p&gt;At Velocity this week, we&amp;rsquo;re talking a lot about resilience, operations, and so on. Introducing change is often one of the things that exposes failure modes in our products, and this fragility is probably more likely to show up during deployments than almost any other time. But there&amp;rsquo;s not a lot of discussion at Velocity about deployment &amp;ndash; that vital part of the engineering process where we take code from development and mutate our production environment to include it.&lt;/p&gt;

&lt;p&gt;I started asking some people about this, because I need to resume the deployment effort at my own company. A few people gave me pointers to prior art to look at, but some other people told me it&amp;rsquo;s not a solved problem for them either. I&amp;rsquo;ll include some of that information in this post.&lt;/p&gt;

&lt;p&gt;But first I want to write my current thoughts about this subject, to get it on record and to stimulate more conversation. Later I&amp;rsquo;ll follow up after I&amp;rsquo;ve learned more.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a little difficult for me to organize my thoughts coherently, so I&amp;rsquo;ll just drop a list on you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I want continuous deployment because if it&amp;rsquo;s not a part of the culture at the company, we&amp;rsquo;ll engineer ourselves into a corner away from it and it&amp;rsquo;ll get more and more difficult to ship code rapidly later. Tools are vital; rules can&amp;rsquo;t overcome the natural reluctance (or just lack of incentive) to push code to production. I also want continuous deployment for a few reasons that might be obvious to readers. First, small, incremental changes are a lot less risky. Second, it is a positive feedback cycle. Third, code that&amp;rsquo;s written but not serving customers is inventory that I&amp;rsquo;ve paid for but not benefited from (and neither are customers). The cost of this inventory is very real; this is a philosophy expressed well in Eli Goldratt&amp;rsquo;s book &lt;em&gt;The Goal&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Code should be deployed when it&amp;rsquo;s merged to master/HEAD and all tests passed. It&amp;rsquo;s a good question whether it should be deployed completely automatically, or whether it&amp;rsquo;s good to let people batch together some changes. I favor the latter. We might not want to deploy every typo fixed. We don&amp;rsquo;t want the batches to accumulate, though, or deployment gets really scary and risky. Visibility into whose changes, and what they are, is important for this scenario. Approval by all involved is also important.&lt;/li&gt;
&lt;li&gt;I don&amp;rsquo;t want to build all of this infrastructure myself. I want to use external providers as much as possible. I prefer to buy or rent rather than build, because I won&amp;rsquo;t do the job as well, and it&amp;rsquo;s not my core business. I don&amp;rsquo;t want to engage in &amp;ldquo;undifferentiated heavy lifting,&amp;rdquo; to quote someone smart at Netflix.&lt;/li&gt;
&lt;li&gt;However, there&amp;rsquo;s a tension here. External providers must be a convenience, not in the critical path. If one or more external providers is down, that can&amp;rsquo;t be a hard block on a deployment. The last thing I want is to have downtime I can&amp;rsquo;t fix because someone else has downtime too. As an example, I want to continue to use Github and CircleCI, but I don&amp;rsquo;t want to make them SPOFs. But if I have an alternate, less-used deployment route, that&amp;rsquo;s also a problem; there should only be one deployment system, or the fallback will fail when I need it. I think the solution is to make Github and CircleCI trigger deployment, but only as one possible source of triggers.&lt;/li&gt;
&lt;li&gt;Deploying binaries with restarts is very different from source code deployments, and there are other types of deployments that need to be considered as well. Deployment to stateless resources (a web server) is a lot simpler and less risky than deploying to something that is stateful, or affects something stateful such as a database server. There&amp;rsquo;s also the matter of migrations. From my experience with lots of large companies, migrations are simplistic and I&amp;rsquo;ve never seen them scale beyond toy applications. But taking them out-of-band means the system is not completely self-documenting, and may not be runnable unless some change or other requirement is satisfied, which can only be performed and verified by a human. These are concerns I don&amp;rsquo;t know how to resolve.&lt;/li&gt;
&lt;li&gt;Although it&amp;rsquo;s tempting to put manifests (Procfile) and include provisioning (and even scaling) in the deployment process, I think it&amp;rsquo;s better to put a strong barrier between those. Otherwise we&amp;rsquo;ll end up with a hairball that can&amp;rsquo;t be dealt with separately. System provisioning and configuration to prepare an environment to be deployed into is not part of deployment. Similarly, there needs to be some thought about a service directory to register and mutate the state of the overall system, such as taking apps in and out of proxies and load balancers before, during, and after deployments. That might need to be part of deployment, or the provisioning, or both.&lt;/li&gt;
&lt;li&gt;Most of the services I&amp;rsquo;ve seen for deployment want to imagine that the world is all on Heroku, where a deployment is a &lt;code&gt;git push&lt;/code&gt;. Unfortunately, as nice as that is, it isn&amp;rsquo;t going to work. The other thing many of them offer is &amp;ldquo;we&amp;rsquo;ll run your Capistrano jobs&amp;rdquo; &amp;ndash; but that&amp;rsquo;s also not workable, because allowing external hands to poke into our systems is not an option. Agent-based deployment is preferable. I have good experience with this, even with self-upgrading agents. There are some companies (Distelli) that do something reasonable here.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thoughts from other people I talked to include:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We think about this basically all the time at [company]. The difficulty is that organizations build their own because there&amp;rsquo;s a likely corollary to Conway&amp;rsquo;s Law here: deployment and development infrastructure are context sensitive, so therefore organization sensitive.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And Jez Humble offered this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I wrote a &lt;a href=&#34;http://www.amazon.com/dp/0321601912&#34; target=&#34;_blank&#34;&gt;book&lt;/a&gt; on the topic, plus I &lt;a href=&#34;http://continuousdelivery.com/&#34; target=&#34;_blank&#34;&gt;blog&lt;/a&gt; and &lt;a href=&#34;http://continuousdelivery.com/talks/&#34; target=&#34;_blank&#34;&gt;speak&lt;/a&gt; about it a bunch.&lt;/p&gt;

&lt;p&gt;You also want to check out Michael Nygard&amp;rsquo;s &lt;a href=&#34;http://www.amazon.com/dp/0978739213/&#34; target=&#34;_blank&#34;&gt;Release It!&lt;/a&gt; and his &lt;a href=&#34;http://www.youtube.com/watch?v=Luskg9ES9qI&#34; target=&#34;_blank&#34;&gt;stuff&lt;/a&gt;, which is extremely awesome&lt;/p&gt;

&lt;p&gt;There are some &lt;a href=&#34;http://continuousdelivery.com/2013/05/videos-from-the-continuous-delivery-track-at-qcon-sf-2012/&#34; target=&#34;_blank&#34;&gt;talks&lt;/a&gt; from the continuous delivery tracks at various conferences (including from &lt;a href=&#34;http://www.youtube.com/watch?v=JR-ccCTmMKY&#34; target=&#34;_blank&#34;&gt;Etsy&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m running a conference which talks about continuous delivery, lean UX, devops and related stuff: &lt;a href=&#34;http://flowcon.org/flowcon-sanfran-2013/schedule/index.jsp&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://flowcon.org/flowcon-sanfran-2013/schedule/index.jsp&#34;&gt;http://flowcon.org/flowcon-sanfran-2013/schedule/index.jsp&lt;/a&gt;&lt;/a&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I look forward to your thoughts and links to further study. Thanks!&lt;/p&gt;
</description>
        </item>
    
        <item>
          <title>Speaking at Percona University Sept 12th</title>
          <link>https://www.xaprb.com/blog/2013/08/18/speaking-at-percona-university-sept-12th/</link>
          <pubDate>Sun, 18 Aug 2013 00:00:00 UTC</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2013/08/18/speaking-at-percona-university-sept-12th/</guid>
          <description>&lt;p&gt;I&amp;rsquo;ll be joining Percona for a free day of MySQL education and insight at their upcoming &lt;a href=&#34;http://www.percona.com/news-and-events/percona-university/washington-dc&#34;&gt;Percona University Washington DC event on September 12th&lt;/a&gt;. My topic is accessing MySQL from Google&amp;rsquo;s Go programming language. I&amp;rsquo;ve learned a lot about this over the past year or so, and hopefully I can help you get a quick-start.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re not familiar with Go, it&amp;rsquo;s the darling of the Hacker News crowd these days. Anything with &amp;ldquo;Go&amp;rdquo; in its title gets to the front page for at least a little while! Go is a great systems programming language. It&amp;rsquo;s safe to say I&amp;rsquo;ve fallen in love with it, and it&amp;rsquo;s now my favorite programming language of all those I&amp;rsquo;ve used over my entire career. I chose it because it&amp;rsquo;s ideally suited for VividCortex&amp;rsquo;s agent programs (zero dependencies, compiled, lightweight, high performance, robust, makes concurrency easy and safe), and we&amp;rsquo;re using it for our API servers and backend processing jobs for many of the same reasons.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a lot of great content at these free Percona University events. If you&amp;rsquo;re not near Washington DC, you should sign up for Percona&amp;rsquo;s &lt;a href=&#34;http://www.percona.com/subscribe&#34;&gt;conferences and training newsletter&lt;/a&gt; so you find out about the next one near you.&lt;/p&gt;
</description>
        </item>
    
        <item>
          <title>A great talk on Go concurrency patterns</title>
          <link>https://www.xaprb.com/blog/2013/05/24/a-great-talk-on-go-concurrency-patterns/</link>
          <pubDate>Fri, 24 May 2013 00:00:00 UTC</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2013/05/24/a-great-talk-on-go-concurrency-patterns/</guid>
          <description>&lt;p&gt;This &lt;a href=&#34;https://developers.google.com/events/io/sessions/332768653&#34;&gt;35-minute video&lt;/a&gt; from the recent Google I/O conference explains how to use Go&amp;rsquo;s concurrency primitives &amp;ndash; goroutines, channels, and the &lt;code&gt;select&lt;/code&gt; statement &amp;ndash; to do things elegantly, correctly, and safely in a few lines of Go, which would otherwise turn your brain into a pretzel in most programming languages.&lt;/p&gt;

&lt;p&gt;My favorite thing about Go is that a good Go program looks self-evident and obvious, even when it may be doing things that would be insanely complex in another language. Callbacks, closures, mutexes, and so on just disappear, and the program itself emerges, looking completely unimpressive. In many cases I think &amp;ldquo;what&amp;rsquo;s the big deal about that?&amp;rdquo; until I realize how hard it would be to write in Java, or Perl, or so on. A lot of the code in Percona Toolkit, for example, involved &amp;ldquo;&lt;a href=&#34;http://bazaar.launchpad.net/~percona-toolkit-dev/percona-toolkit/2.1/view/head:/bin/pt-query-digest#L11835&#34;&gt;pipelines&lt;/a&gt;&amp;rdquo; of callbacks passing data along to other callbacks for further processing. These were hard to reason about, hard to make resilient to errors and allow clean termination, and were redesigned several times, never very successfully in my opinion. In Go, channels make those kinds of tasks so simple. Such a program in Go looks suspiciously like a Unix | pipe | and | filter | program. If you think about it, the Unix shell itself is a great example of using &amp;ldquo;channels&amp;rdquo; successfully to trivialize what would otherwise be a migraine-inducing task.&lt;/p&gt;
</description>
        </item>
    
        <item>
          <title>Agile project management tools</title>
          <link>https://www.xaprb.com/blog/2013/05/23/agile-project-management-tools/</link>
          <pubDate>Thu, 23 May 2013 00:00:00 UTC</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2013/05/23/agile-project-management-tools/</guid>
          <description>&lt;p&gt;Wow, talk about an industry that&amp;rsquo;s overcrowded with look-alike me-too products. Online agile project management tools are a dime a dozen, which makes me think that they are probably all very similar and probably don&amp;rsquo;t solve most people&amp;rsquo;s needs. I&amp;rsquo;ve observed that when this is true, nearly-indistinguishable tools get reinvented, until the burden of evaluating the options is greater than the burden of just building yet another one, thus perpetuating the cycle.&lt;/p&gt;

&lt;p&gt;Here are &lt;em&gt;some&lt;/em&gt; of the products I looked at yesterday:&lt;/p&gt;

&lt;p&gt;Acunote, ActiveCollab, AgileBench, AgileZen, Asana, Backlog, Basecamp, Blimp, Bugly, Huboard, IceScrum, JIRA, Kanbanery, Kickoff, Lean-To, Lighthouse, OnTime, PivotalTracker, Planbox, Plan.io, Rally, Redmine, ScrumDo, Sensei, SnowyEvening, Sprintly, TargetProcess, Trac, Trajectory, Trello, Unfuddle, YouTrack, Zoho Projects.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.xaprb.com/media/2013/05/shocked.jpg&#34;&gt;&lt;img src=&#34;https://www.xaprb.com/media/2013/05/shocked.jpg&#34; alt=&#34;shocked&#34; width=&#34;400&#34; height=&#34;382&#34; class=&#34;aligncenter size-full wp-image-3177&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
    

  </channel>
</rss>
