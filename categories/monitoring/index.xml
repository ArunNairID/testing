<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> </title>
    <link>https://www.xaprb.com/categories/monitoring/index.xml</link>
    <language>en-us</language>
    <author></author>
    <rights>Copyright (c) 2016</rights>
    <updated>0001-01-01 00:00:00 &#43;0000 UTC</updated>

    
        <item>
          <title>Setting Thresholds With Quantiles</title>
          <link>https://www.xaprb.com/blog/2015/11/07/setting-thresholds-with-quantiles/</link>
          <pubDate>Sat, 07 Nov 2015 19:39:36 -0500</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2015/11/07/setting-thresholds-with-quantiles/</guid>
          <description>&lt;p&gt;I was talking with someone the other day about a visualization I remembered
seeing some years ago, that could help set a reasonable value for a threshold on
a metric. As I&amp;rsquo;ve
&lt;a href=&#34;https://www.vividcortex.com/blog/2013/04/10/2-reasons-why-threshold-based-monitoring-is-hopelessly-broken/&#34;&gt;written&lt;/a&gt;,
thresholds are basically a broken way to monitor systems, but if you&amp;rsquo;re going to
use them, I think there are simple things you can do to avoid making threshold
values &lt;em&gt;completely&lt;/em&gt; arbitrary.&lt;/p&gt;

&lt;p&gt;I couldn&amp;rsquo;t find the place I&amp;rsquo;d seen the visualization (if you know prior art for
the below, please comment!) so I decided to just blog about it. Suppose you
start off with a time series:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.xaprb.com/media/2015/11/time-series.png&#34; alt=&#34;time series&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The idea is that you might want to alert on this metric breaking some threshold,
but what&amp;rsquo;s the right value? There are lots of ways you could do it: a multiple
of the average, some quantile, some number of standard deviations from the mean,
etc, etc. For example, you could say &amp;ldquo;I want to alert if the metric exceeds its
usual 99.9th percentile.&amp;rdquo; But isn&amp;rsquo;t 99.9 an arbitrary number, too? What makes it
so special? Is there &lt;em&gt;any&lt;/em&gt; way to pick a number that isn&amp;rsquo;t just pulled out of a
hat?&lt;/p&gt;

&lt;p&gt;I need to preface all of this with a disclaimer. Everyone&amp;rsquo;s systems are
different, static thresholds are silly, quantiles are known to the state of
California to cause cancer, and so on. What I&amp;rsquo;m about to show you is only
&lt;em&gt;slightly&lt;/em&gt; less arbitrary. Don&amp;rsquo;t confuse it for a rule that actually has a
strong reason why it&amp;rsquo;s better than the alternatives.&lt;/p&gt;

&lt;p&gt;The idea is to look at the &lt;em&gt;shape&lt;/em&gt; of your data and use that to decide where you
feel is the right threshold. The &amp;ldquo;shape&amp;rdquo; is the distribution of the data&amp;ndash;how
its values are typically spread.&lt;/p&gt;

&lt;p&gt;One of the best ways to do that is to plot the quantiles. In the following plot,
the quantiles go from left to right. At the far left is the 0th percentile, and
at the far right is the 100th percentile. Another way to say that is the left is
the minimum value and the right is the maximum value.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.xaprb.com/media/2015/11/quantiles.png&#34; alt=&#34;quantiles&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve made no effort to polish this chart; you&amp;rsquo;ll notice that I generated the
quantiles by taking a vector of 1000 numbers and dividing it by 1000, for
example.&lt;/p&gt;

&lt;p&gt;Now, as you look at this chart, you can see that near the far right, it suddenly
jumps&amp;ndash;it has an elbow. Let&amp;rsquo;s zoom in on the last 10% of the chart, i.e. the 90th
percentile and above:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.xaprb.com/media/2015/11/95-percent.png&#34; alt=&#34;95th percentile&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s nothing magical about this elbow. There&amp;rsquo;s nothing magical about the last
10 percent of values. It just so happens that those last few are
disproportionately larger than the rest. In simple terms, it means that the
system&amp;rsquo;s model, or perhaps the parameters for its model, apparently changed.
And if you&amp;rsquo;re going to pick a place to alert on a threshold, maybe a point where
the behavior diverges rapidly is as good as any and better than some.&lt;/p&gt;

&lt;p&gt;In other words, you could put your threshold just at the point where the
quantile plot gets steeper, which is about the value 1600 in this dataset.&lt;/p&gt;

&lt;p&gt;Not all data behaves this way. Some metrics will have a nice line all the way up
and to the right, with no elbow. Some will jump sooner. Some will have a big
ledge, even several ledges. You&amp;rsquo;ll get all kinds of different shapes and sizes
of data. The point is to at least &lt;em&gt;know&lt;/em&gt; what shapes and sizes your own data
has.&lt;/p&gt;

&lt;p&gt;Visualizations like this have a lot of explanatory power and can show you
potentially surprising things very easily. That&amp;rsquo;s why this kind of
visualization, rather than just the standard boring time series plot, is not a
bad thing to know how to do. It&amp;rsquo;s not revolutionary, things like this are used
in all sorts of ways and by lots of people. &lt;a href=&#34;https://en.wikipedia.org/wiki/Q%E2%80%93Q_plot&#34;&gt;QQ
plots&lt;/a&gt;, for example, are a
related technique.&lt;/p&gt;

&lt;p&gt;So I&amp;rsquo;m probably repeating myself too much, but again this is nothing special,
but it&amp;rsquo;s something anyway. With this approach, there still may not be a strong
justification for choosing a number as a threshold, but at least there&amp;rsquo;s a
reason and method, and it&amp;rsquo;s better than cargo cult, a random number generator,
or copy-and-paste.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the R code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;perf &amp;lt;- read.csv(&amp;quot;/path/to/perf.csv&amp;quot;, sep=&amp;quot;&amp;quot;)
plot(perf$tput)
plot(c(1:1000), quantile(perf$tput, probs=c(1:1000)/1000))
plot(c(900:1000), quantile(perf$tput, probs=c(900:1000)/1000))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Related: someone on Twitter pointed me to &lt;a href=&#34;http://apmblog.dynatrace.com/2012/11/14/why-averages-suck-and-percentiles-are-great/&#34;&gt;this blog post from Dynatrace&lt;/a&gt;.&lt;/p&gt;</description>
        </item>
    
        <item>
          <title>New O&#39;Reilly Book, Anomaly Detection For Monitoring</title>
          <link>https://www.xaprb.com/blog/2015/08/03/anomaly-detection-book/</link>
          <pubDate>Mon, 03 Aug 2015 20:21:39 -0400</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2015/08/03/anomaly-detection-book/</guid>
          <description>&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; the book is now available from
&lt;a href=&#34;https://ruxit.com/anomaly-detection/&#34;&gt;https://ruxit.com/anomaly-detection/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Together with &lt;a href=&#34;http://preet.am/&#34;&gt;Preetam Jinka&lt;/a&gt;, I&amp;rsquo;m writing a book for O&amp;rsquo;Reilly
called &lt;em&gt;Anomaly Detection for Monitoring&lt;/em&gt; (working title).&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d like your help with this. Would you please comment,
&lt;a href=&#34;https://twitter.com/xaprb&#34;&gt;tweet&lt;/a&gt;, or &lt;a href=&#34;mailto:baron@xaprb.com&#34;&gt;email&lt;/a&gt; me
examples of anomaly detection used for monitoring; and monitoring problems that
frustrate you, which you think anomaly detection might help solve?&lt;/p&gt;

&lt;p&gt;Thanks in advance.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.xaprb.com/media/2015/08/outlier.jpg&#34; alt=&#34;Outlier&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.flickr.com/photos/mjfonseca/8392780221/&#34;&gt;Pic Credit&lt;/a&gt;&lt;/p&gt;</description>
        </item>
    
        <item>
          <title>Early-Warning Is an Unknown Unknown</title>
          <link>https://www.xaprb.com/blog/2013/10/08/early-warning-is-an-unknown-unknown/</link>
          <pubDate>Tue, 08 Oct 2013 00:00:00 UTC</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2013/10/08/early-warning-is-an-unknown-unknown/</guid>
          <description>

&lt;p&gt;&lt;em&gt;This post originally appeared on &lt;a href=&#34;http://radar.oreilly.com/2013/10/early-warning-is-an-unknown-unknown.html&#34;&gt;O&amp;rsquo;Reilly Radar&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In 2002, US Secretary of State Donald Rumsfeld &lt;a href=&#34;http://www.youtube.com/watch?v=GiPe1OiKQuk&#34;&gt;told a reporter&lt;/a&gt; that not only don’t we know everything important, but sometimes we don’t even know what knowledge we lack:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are known knowns; there are things we know we know. We also know there are known unknowns; that is to say we know there are some things we do not know. But there are also unknown unknowns – the ones we don’t know we don’t know.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of the purposes of monitoring is to build early-warning systems to alert of problems before they become serious. But how can we recognize a failure in its early stages? It’s a thorny question.&lt;/p&gt;

&lt;p&gt;As hard as it seems, it’s even harder than you think it is. To illustrate, we can ask a seemingly simple related question: can we reliably recognize problems after they’ve become serious, perhaps to the point of causing downtime? Even this is hard. That’s because no matter how many failures you’ve seen in systems, you can pretty much guarantee that someday in the future you’ll be surprised by an issue you never could have imagined until you saw it.&lt;/p&gt;

&lt;p&gt;Not to get all Rumsfeld on you, but we’re talking about unknown unknowns.&lt;/p&gt;

&lt;h3 id=&#34;early-detection&#34;&gt;Early Detection&lt;/h3&gt;

&lt;p&gt;I have been pondering this issue–being proactive instead of reactive–for years. When I worked at Percona I surveyed hundreds of cases of customer downtime, poring through notes and email threads, examining all the data I had and trying to determine what caused the downtime and how to prevent it. The result was two white papers (&lt;a href=&#34;http://www.percona.com/about-us/mysql-white-paper/causes-of-downtime-in-production-mysql-servers&#34;&gt;downtime&lt;/a&gt;, &lt;a href=&#34;http://www.percona.com/about-us/mysql-white-paper/preventing-mysql-emergencies&#34;&gt;how to prevent it&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;How could someone have detected all of those problems in the making? There’s a huge variety of problems, and to answer this question it might be useful to categorize system failures. Here’s a quick list, which might not be exhaustive, but it’ll serve the purpose:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dead&lt;/strong&gt;. The system isn’t alive (the process or server isn’t running, for example).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unreachable&lt;/strong&gt;. The system may be alive somewhere, but you can’t connect to it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unresponsive&lt;/strong&gt;. You can connect to the system, but it doesn’t respond to your requests.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Aborting&lt;/strong&gt;. You can ask the system to do work, and it starts but can’t finish.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Slow&lt;/strong&gt;. You can ask the system to do work, but it doesn’t happen fast enough to matter.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Wrong&lt;/strong&gt;. The system responds but does something wrong, e.g. due to unexpected state.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now try to think of how you’d detect these things early. It’s hard, because the system in question (an app or database server, perhaps) is likely dependent on many other systems and resources, as well as data and system load. Some resources have hard limits–disk space, for example, isn’t elastic. There’s usually no slowdown: the server works until the last byte is filled up, and then abruptly starts failing, perhaps even getting stuck on a blocked system call.&lt;/p&gt;

&lt;p&gt;External resources are even worse because they’re dependent on things happening outside. DNS is a great example; think of any software you’ve written. How will it react if a name lookup fails? We can mention lots of types of resources that can fail or get used up: port range, filehandle limits, memory limits, CPU cycles, and so on. What if the resource you’re relying on is dependent on another resource? And what about errors, such as replication getting behind or stopping, disk or memory corruption, and so on? How can you detect these?&lt;/p&gt;

&lt;p&gt;Resources with unclear limits or burstable capacity can be even harder to understand. Just what is the maximum capacity of your DNS server, anyway? At what point will traffic exceed its ability to respond promptly and consistently? If you don’t know this, how can you predict a failure in advance and give early warning?&lt;/p&gt;

&lt;h3 id=&#34;the-state-of-the-monitoring-union&#34;&gt;The State of the Monitoring Union&lt;/h3&gt;

&lt;p&gt;I don’t think this is a tractable problem with current monitoring systems and practices. Let’s take Nagios as an example: it’s reasonably good at detecting whether services are reachable and alive, but beyond that, it has no system-specific smarts. The sysadmin is expected to use plugins to map domain state into Nagios’s OK, WARN, CRIT, and UNKNOWN. Thus, Nagios’s answer is to pass the buck to the operations staff. We love to hate Nagios right now, but Sensu App doesn’t do anything fundamentally different in this regard, either.&lt;/p&gt;

&lt;p&gt;Alive-or-dead checks don’t provide early warnings. Nagios plugins often try to do that with thresholds. Some things are reasonably amenable to thresholds. With enough care, for example, one can often set thresholds on disk fullness at appropriate levels to provide an early warning of a disk filling up. As I discovered at Percona, full disks are a major cause of downtime, so this might be sensible to do (though I think it’s still a blunt instrument). But most systems, and the resources they rely on, are far too complex to yield to a threshold-based approach. There are several reasons for this:&lt;/p&gt;

&lt;p&gt;Most systems are dynamic with respect to resource consumption, and thresholds are wrong instantly, for every system, for every moment of the day. Baselining and similar techniques improve things, but don’t solve this problem completely. Resource consumption doesn’t indicate whether something is wrong–the resources are there to be used, after all. Most of the time all you’ll get are false alarms. There are way too many resources, used in far too many different ways, to put thresholds on them all.&lt;/p&gt;

&lt;p&gt;In the end, the system administrator is on the horns of a dilemma: should I monitor for every possible failure mode I can imagine? Or just the ones I’ve seen before? What about the ones I can’t imagine and haven’t seen yet? And if I monitor as completely as I think I can, will I get too many false positives? If you haven’t been down this path before, I can give you a spoiler alert: here be false-positive dragons.&lt;/p&gt;

&lt;h3 id=&#34;systematic-organizing-principles&#34;&gt;Systematic Organizing Principles&lt;/h3&gt;

&lt;p&gt;I think one of the things that’s missing in the current crop of monitoring tools is a systematic approach to problem detection and resolution. We badly need organizing principles to guide us, or we’ll be flailing around in a Rube Goldberg machine without being able to see which wires are connected to which switches.&lt;/p&gt;

&lt;p&gt;That’s why I think &lt;strong&gt;workload&lt;/strong&gt; should be regarded as of primary importance. We have servers to do work for us. We don’t measure a systems’ success by how busy the CPUs and disks are, or how low the cache hit ratio is. We measure success by how much work the system can do for us, and how consistently. In other words, we want to know the speed and quality of getting-work-done.&lt;/p&gt;

&lt;p&gt;The second guiding principle I propose is to &lt;strong&gt;measure and analyze what you care about&lt;/strong&gt;. If you agree that the rate and quality of task completion is the most important thing to measure in systems, then I suggest that you should be measuring at least throughput and response time of those tasks, and analyzing those for degradation that can provide early warnings of interruptions of service. On the other hand, I suggest being very skeptical of measuring and alerting on things that are not directly related to work-getting-done. For more on this topic, see Alois Reitbauer’s related blog post, &lt;a href=&#34;http://programming.oreilly.com/2013/09/building-an-alerting-system-that-really-works.html&#34;&gt;Building an Alerting System That Really Works&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A third principle I suggest is that, due to the size and complexity of modern systems, you should &lt;strong&gt;never alert about something that can’t be fixed&lt;/strong&gt;. The buzzword for this is “actionable alerts.” The cognitive load of unfixable alarms will make operations staff send alerts directly to /dev/null. It’s a pretty short path from there to the monitoring system becoming shelfware.&lt;/p&gt;

&lt;p&gt;“Actionable” is worth exploring more. As an example, MySQL replication is always delayed by some amount; the question is how much. When a master’s load increases too much, the replica can’t keep up. You need to solve this problem–and there are many ways to do s –but in the most basic sense, you can’t do anything about a replica that’s behind. What would you do, anyway? Kill the server? Skip replicating a bunch of events? These just take a lagged system and turn it into a broken or dead one. An alert on delayed replication is not actionable because once the replica is behind, all you can do is wait and let it catch up, and that specific incident can’t be fixed. Instead of sending an alert, this is the type of information that should be exposed in a non-intrusive way (such as a graph) for a DBA to address in the normal course of events.&lt;/p&gt;

&lt;p&gt;Similarly, if you alert on high CPU utilization, my experience is you’ll probably drive yourself nuts. You might think “I’ll find out if a rogue process runs,” but you’ll really find out when backups run instead. You’ll get a hundred “Oh, it’s because it’s doing work we’ve asked it to do” incidents for every “That’s not supposed to be happening!” event.&lt;/p&gt;

&lt;h3 id=&#34;comprehensive-alerting&#34;&gt;Comprehensive Alerting&lt;/h3&gt;

&lt;p&gt;Should you try to set up early-warning systems for everything that could possibly go wrong? Even if you were able to do that (and I’ve argued that you can’t), I’d say no. My experience is that attempting complete coverage of all possible failure scenarios leads to false-alarm madness. And much like company policies that are written to forbid behavior that’s obviously unacceptable, I think we should focus our efforts on things that are likely to provide some ROI.&lt;/p&gt;

&lt;p&gt;So I suggest that instead of trying to predict and guard against all possible failure modes, most people should learn from past mistakes, assess the risks (risk = probability * severity), and guard against the most common and serious ones. Disks getting full, for example, is a no-brainer. High CPU load and replication delay are not.&lt;/p&gt;

&lt;p&gt;I’ll be speaking about this topic as part of a &lt;a href=&#34;http://velocityconf.com/velocityny2013/public/schedule/detail/31361/&#34;&gt;broader presentation at Velocity New York&lt;/a&gt; on October 14th. I intend to cover much more material–this is just a small part of it. But I’d be interested to hear your thoughts on this and related topics. It’ll help make my presentation better!&lt;/p&gt;
</description>
        </item>
    
        <item>
          <title>MySQL monitoring meetup tonight!</title>
          <link>https://www.xaprb.com/blog/2012/03/21/mysql-monitoring-meetup-tonight/</link>
          <pubDate>Wed, 21 Mar 2012 00:00:00 UTC</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2012/03/21/mysql-monitoring-meetup-tonight/</guid>
          <description>&lt;p&gt;Here&amp;rsquo;s your spammy day-of reminder about tonight&amp;rsquo;s free MySQL meetup. The topic is &lt;a href=&#34;http://www.meetup.com/Central-Virginia-MySQL-Meetup/events/53029362/&#34;&gt;MySQL Monitoring Bonanza&lt;/a&gt;. There will be beer, pizza, pretty charts and graphs, and friends. Free as in beer (and pizza, did I mention that?)!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: &lt;a href=&#34;https://vividcortex.com/&#34;&gt;VividCortex&lt;/a&gt; is the startup I founded in 2012. It&amp;rsquo;s the easiest way to monitor what
your servers are doing in production. VividCortex offers &lt;a href=&#34;https://vividcortex.com/monitoring/mysql/&#34;&gt;MySQL performance
monitoring&lt;/a&gt; and &lt;a href=&#34;https://vividcortex.com/monitoring/postgres/&#34;&gt;PostgreSQL
performance management&lt;/a&gt; among many
other features.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
    
        <item>
          <title>Free webinar on monitoring MySQL</title>
          <link>https://www.xaprb.com/blog/2012/03/19/free-webinar-on-monitoring-mysql/</link>
          <pubDate>Mon, 19 Mar 2012 00:00:00 UTC</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2012/03/19/free-webinar-on-monitoring-mysql/</guid>
          <description>&lt;p&gt;If you follow what Percona is up to, you might have noticed that I&amp;rsquo;ve created a set of high-quality monitoring and graphing plugins for MySQL and related systems. Currently they support Nagios and Cacti. I&amp;rsquo;ll give a &lt;a href=&#34;http://www.percona.com/webinars/2012-03-28-monitoring-mysql-with-percona-monitoring-plugins/&#34;&gt;free webinar on March 28th&lt;/a&gt; discussing these, and more broadly, discussing how to monitor MySQL successfully to avoid common problems like spammy alerts about nonexistent problems.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://vividcortex.com/&#34;&gt;VividCortex&lt;/a&gt; is the startup I founded in 2012. It&amp;rsquo;s the easiest way to monitor what
your servers are doing in production and I consider it far superior to Cacti. VividCortex offers &lt;a href=&#34;https://vividcortex.com/monitoring/mysql/&#34;&gt;MySQL performance
monitoring&lt;/a&gt; and &lt;a href=&#34;https://vividcortex.com/monitoring/postgres/&#34;&gt;PostgreSQL
performance management&lt;/a&gt; among many
other features.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
    
        <item>
          <title>Version 1.1.8 of Better Cacti Templates released</title>
          <link>https://www.xaprb.com/blog/2011/01/22/version-1-1-8-of-better-cacti-templates-released/</link>
          <pubDate>Sat, 22 Jan 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2011/01/22/version-1-1-8-of-better-cacti-templates-released/</guid>
          <description>&lt;p&gt;I&amp;rsquo;ve released version 1.1.8 of the &lt;a href=&#34;http://code.google.com/p/mysql-cacti-templates/&#34;&gt;Better Cacti Templates&lt;/a&gt; project. This release includes a bunch of bug fixes and several important new graphs. There are &lt;a href=&#34;http://code.google.com/p/mysql-cacti-templates/wiki/MySQLTemplates#MySQL_Query_Response_Time_%28Microseconds%29&#34;&gt;graphs&lt;/a&gt; for the new &lt;a href=&#34;http://www.percona.com/docs/wiki/percona-server:features:response_time_distribution&#34;&gt;response-time statistics exposed in Percona Server&lt;/a&gt;, and a new set of graphs for &lt;a href=&#34;http://code.google.com/p/mysql-cacti-templates/wiki/MongoDBTemplates&#34;&gt;MongoDB&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://vividcortex.com/&#34;&gt;VividCortex&lt;/a&gt; is the startup I founded in 2012. It&amp;rsquo;s the easiest way to monitor what
your servers are doing in production and I consider it far superior to Cacti. VividCortex offers &lt;a href=&#34;https://vividcortex.com/monitoring/mysql/&#34;&gt;MySQL performance
monitoring&lt;/a&gt; and &lt;a href=&#34;https://vividcortex.com/monitoring/postgres/&#34;&gt;PostgreSQL
performance management&lt;/a&gt; among many
other features.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are &lt;a href=&#34;http://code.google.com/p/mysql-cacti-templates/wiki/UpgradingTemplates&#34;&gt;upgrade instructions&lt;/a&gt; on the project wiki for this and all releases. There is also a comprehensive tutorial on &lt;a href=&#34;http://code.google.com/p/mysql-cacti-templates/wiki/CreatingGraphs&#34;&gt;how to create your own graphs and templates&lt;/a&gt; with this project. Use the &lt;a href=&#34;http://code.google.com/p/mysql-cacti-templates/issues/list&#34;&gt;project issue tracker&lt;/a&gt; (&lt;strong&gt;not the comments on this post!&lt;/strong&gt;) to view and report issues, and use the &lt;a href=&#34;http://groups.google.com/group/better-cacti-templates&#34;&gt;project mailing list&lt;/a&gt; to discuss the templates and scripts.&lt;/p&gt;

&lt;p&gt;The full changelog follows.&lt;/p&gt;

&lt;pre&gt;
2011-01-22: version 1.1.8

  * The cache file names could conflict due to omitting --port (issue 171).
  * Load-average parsing did not work correctly at high load (issue 170).
  * The --mpds option to make-template.pl did not create new inputs (issue 133).
  * The url and port were reversed in the Nginx commandline (issue 149).
  * Added $nc_cmd to ss_get_by_ssh.php (issue 154, issue 152).
  * InnoDB Transactions and other graphs showed NaN instead of 0 (issue 159).
  * Added graphs for Percona Server response-time distribution (issue 158).
  * Added graphs for MongoDB (issue 136).
  * Added a minimum option to the template construction logic (issue 169).
  * Added memtotal for Memory (issue 146).
  * make-template.pl sanity checks were too strict (issue 168).
&lt;/pre&gt;
</description>
        </item>
    
        <item>
          <title>A better way to build Cacti templates</title>
          <link>https://www.xaprb.com/blog/2010/05/25/a-better-way-to-build-cacti-templates/</link>
          <pubDate>Tue, 25 May 2010 00:00:00 UTC</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2010/05/25/a-better-way-to-build-cacti-templates/</guid>
          <description>&lt;p&gt;The traditional way to build Cacti templates is through the Cacti web interface. This is an &lt;em&gt;enormous&lt;/em&gt; amount of work, and the result is generally not very consistent or good quality. The process is too error-prone. You can export the templates as XML, but they tend to have problems such as version incompatibilities with other Cacti installations, and it&amp;rsquo;s hard to adapt them for user preferences such as different graph image sizes and polling intervals.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://vividcortex.com/&#34;&gt;VividCortex&lt;/a&gt; is the startup I founded in 2012. It&amp;rsquo;s the easiest way to monitor what
your servers are doing in production and I consider it far superior to Cacti. VividCortex offers &lt;a href=&#34;https://vividcortex.com/monitoring/mysql/&#34;&gt;MySQL performance
monitoring&lt;/a&gt; and &lt;a href=&#34;https://vividcortex.com/monitoring/postgres/&#34;&gt;PostgreSQL
performance management&lt;/a&gt; among many
other features.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The way I build Cacti templates is exactly the opposite. I create a data structure in a file, which looks like many configuration file syntaxes you&amp;rsquo;ve probably worked with. It represents the graphs, templates, scripts, and so on. From this, a tool generates the XML template file, which is a universal template definition, and is a breeze to import into Cacti. It is completely consistent and has zero cruft in it. This process prevents errors, and the results are perfect every time. (There&amp;rsquo;s a test suite, by the way.)&lt;/p&gt;

&lt;p&gt;All the tools, documentation, how-tos, examples, and pre-fabricated scripts and templates you need are at the &lt;a href=&#34;http://code.google.com/p/mysql-cacti-templates/&#34;&gt;Better Cacti Templates&lt;/a&gt; open-source project. If you want to build your own templates, pay special attention to &lt;a href=&#34;http://code.google.com/p/mysql-cacti-templates/wiki/CreatingGraphs&#34;&gt;the documentation on creating graphs&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
    
        <item>
          <title>Version 1.1.7 of Better Cacti Templates released</title>
          <link>https://www.xaprb.com/blog/2010/04/20/version-1-1-7-of-better-cacti-templates-released/</link>
          <pubDate>Tue, 20 Apr 2010 00:00:00 UTC</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2010/04/20/version-1-1-7-of-better-cacti-templates-released/</guid>
          <description>&lt;p&gt;I&amp;rsquo;ve released version 1.1.7 of the &lt;a href=&#34;http://code.google.com/p/mysql-cacti-templates/&#34;&gt;Better Cacti Templates&lt;/a&gt; project. This release includes a bunch of bug fixes, some new graphs for MySQL, and two new sets of graphs, for Redis graphing and for JMX graphing.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://vividcortex.com/&#34;&gt;VividCortex&lt;/a&gt; is the startup I founded in 2012. It&amp;rsquo;s the easiest way to monitor what
your servers are doing in production and I consider it far superior to Cacti. VividCortex offers &lt;a href=&#34;https://vividcortex.com/monitoring/mysql/&#34;&gt;MySQL performance
monitoring&lt;/a&gt; and &lt;a href=&#34;https://vividcortex.com/monitoring/postgres/&#34;&gt;PostgreSQL
performance management&lt;/a&gt; among many
other features.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are &lt;a href=&#34;http://code.google.com/p/mysql-cacti-templates/wiki/UpgradingTemplates&#34;&gt;upgrade instructions&lt;/a&gt; on the project wiki for this and all releases. There is also a comprehensive tutorial on &lt;a href=&#34;http://code.google.com/p/mysql-cacti-templates/wiki/CreatingGraphs&#34;&gt;how to create your own graphs and templates&lt;/a&gt; with this project. Use the &lt;a href=&#34;http://code.google.com/p/mysql-cacti-templates/issues/list&#34;&gt;project issue tracker&lt;/a&gt; to view and report issues, and use the &lt;a href=&#34;http://groups.google.com/group/better-cacti-templates&#34;&gt;project mailing list&lt;/a&gt; to discuss the templates and scripts.&lt;/p&gt;

&lt;p&gt;The full changelog follows.&lt;/p&gt;

&lt;pre&gt;
  * Added graphs for Innodb_row_lock_waits and Innodb_row_lock_time (issue 118).
  * Added graphs for the MyISAM key buffer memory consumption (issue 127).
  * The loadavg/users graphs failed when only 1 user was logged in (issue 131).
  * The Apache and Nginx graphs couldn&#39;t use the --port2 option (issue 129).
  * The InnoDB Log graph&#39;s unflushed_log should be GAUGE not COUNTER (issue 10).
  * Added graphs for InnoDB semaphore waits (issue 124).
  * Added Redis graphs (issue 90).
  * Added --openvz_cmd configuration and command-line option (issue 130).
  * Added --mysql_ssl configuration and command-line option (issue 103).
  * Added JMX graphs (--type jmx) (issue 139).
  * Big-integer math printf spec was missing a % character (issue 137).
  * Partially accepted patches from Artur Kaszuba (more remaining in issue 120).
&lt;/pre&gt;
</description>
        </item>
    
        <item>
          <title>Version 1.1.6 of Better Cacti Templates released</title>
          <link>https://www.xaprb.com/blog/2010/01/10/version-1-1-6-of-better-cacti-templates-released/</link>
          <pubDate>Sun, 10 Jan 2010 00:00:00 UTC</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2010/01/10/version-1-1-6-of-better-cacti-templates-released/</guid>
          <description>&lt;p&gt;I&amp;rsquo;ve released version 1.1.6 of the &lt;a href=&#34;http://code.google.com/p/mysql-cacti-templates/&#34;&gt;Better Cacti Templates&lt;/a&gt; project. This release includes a bunch of bug fixes (but not all of them!) and two new sets of graphs. One set is for disk I/O on GNU/Linux, and the other is a new set of templates for OpenVZ. I&amp;rsquo;m looking for feedback on both of those. This release also has a bunch of code-level features: much better test coverage (hooray!), and a refactored ss_get_by_ssh.php that makes it much easier to create new graphs and templates. The SSH-based templates also take advantage of the same caching as the MySQL templates, which makes them a lot more efficient.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://vividcortex.com/&#34;&gt;VividCortex&lt;/a&gt; is the startup I founded in 2012. It&amp;rsquo;s the easiest way to monitor what
your servers are doing in production and I consider it far superior to Cacti. VividCortex offers &lt;a href=&#34;https://vividcortex.com/monitoring/mysql/&#34;&gt;MySQL performance
monitoring&lt;/a&gt; and &lt;a href=&#34;https://vividcortex.com/monitoring/postgres/&#34;&gt;PostgreSQL
performance management&lt;/a&gt; among many
other features.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are &lt;a href=&#34;http://code.google.com/p/mysql-cacti-templates/wiki/UpgradingTemplates&#34;&gt;upgrade instructions&lt;/a&gt; on the project wiki for this and all releases. There is also a comprehensive tutorial on &lt;a href=&#34;http://code.google.com/p/mysql-cacti-templates/wiki/CreatingGraphs&#34;&gt;how to create your own graphs and templates&lt;/a&gt; with this project. Use the &lt;a href=&#34;http://code.google.com/p/mysql-cacti-templates/issues/list&#34;&gt;project issue tracker&lt;/a&gt; to view and report issues, and use the &lt;a href=&#34;http://groups.google.com/group/better-cacti-templates&#34;&gt;project mailing list&lt;/a&gt; to discuss the templates and scripts.&lt;/p&gt;

&lt;p&gt;The full changelog follows.&lt;/p&gt;

&lt;pre&gt;
2010-01-10: version 1.1.6

  * Added OpenVZ graphs (--type openvz) (issue 95).
  * Added IO usage graphs (--type diskstats) (issue 97).
  * Added extra error-reporting (issue 110).
  * The $debug $debug_log options couldn&#39;t be set in the .cnf file (issue 110).
  * Added a --use-ssh option to ss_get_by_ssh.php (issue 66).
  * Added a debugging log to ss_get_by_ssh.php (issue 54).
  * Enabled caching of results in ss_get_by_ssh.php (issue 46).
  * Added a test suite for ss_get_by_ssh.php (issue 110).
  * The &#39;free&#39; stats suffered from PHP&#39;s issues with big numbers (issue 102).
  * There was ambiguity (but no error) in SHOW STATUS overrides (issue 106).
  * It was hard to debug failures caused by missing ext/mysql (issue 105).
  * Code to make ss_get_mysql_stats.php testable was broken (issue 108).
&lt;/pre&gt;
</description>
        </item>
    
        <item>
          <title>A Review of Cacti Network Monitoring by Kundu and Lavlu</title>
          <link>https://www.xaprb.com/blog/2010/01/09/review-cacti-network-monitoring-kundu-lavlu/</link>
          <pubDate>Sat, 09 Jan 2010 00:00:00 UTC</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2010/01/09/review-cacti-network-monitoring-kundu-lavlu/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;http://www.amazon.com/Cacti-Network-Monitoring-Ibrahim-Lavlu/dp/1847195962?tag=xaprb-20&#34;&gt;&lt;img src=&#34;https://www.xaprb.com/media/2010/01/cacti-network-monitoring.jpg&#34; alt=&#34;Cacti Network Monitoring&#34; title=&#34;Cacti Network Monitoring&#34; width=&#34;240&#34; height=&#34;240&#34; class=&#34;size-full wp-image-1531&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://vividcortex.com/&#34;&gt;VividCortex&lt;/a&gt; is the startup I founded in 2012. It&amp;rsquo;s the easiest way to monitor what
your servers are doing in production and I consider it far superior to Cacti. VividCortex offers &lt;a href=&#34;https://vividcortex.com/monitoring/mysql/&#34;&gt;MySQL performance
monitoring&lt;/a&gt; and &lt;a href=&#34;https://vividcortex.com/monitoring/postgres/&#34;&gt;PostgreSQL
performance management&lt;/a&gt; among many
other features.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://www.amazon.com/Cacti-Network-Monitoring-Ibrahim-Lavlu/dp/1847195962?tag=xaprb-20&#34;&gt;Cacti 0.8 Network Monitoring&lt;/a&gt;, Dinangkur Kundu and S. M. Ibrahim Lavlu, Packt, 2009. Page count: 110 pages.&lt;/p&gt;

&lt;p&gt;This is a quite short book that covers some of the breadth but very little of the depth of Cacti. For example, it focuses on Cacti as an SNMP tool for graphing network data, but SNMP is only one of the many ways Cacti can collect data, and of course it graphs anything, not just networks. Each chapter takes the reader through the most important topics, with some code listings and screenshots. On the plus side, this makes it very easy to read quickly, because it doesn&amp;rsquo;t go off on many tangents about special cases and errors.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t want to criticize too much, but I think I should give a summary of the major shortcomings. First, the book is just too small, especially for the price. It is also not very well edited; it seems to have been edited by non-English speakers. Finally, it constantly refers to Cacti as a monitoring tool, even talking about the need to find out about crashed equipment and so on &amp;ndash; but it doesn&amp;rsquo;t clearly say that Cacti is only for performance graphing, not for monitoring and alerting. I wish they had not flung the word &amp;ldquo;monitoring&amp;rdquo; around so casually.&lt;/p&gt;

&lt;p&gt;In terms of topics, it has an overview, installation, creating graphs, creating templates, managing users, SNMP, data queries, and basic administration. The strongest point is the explanation of SNMP. The other chapters have a lot of needless information and screenshots. The installation chapter, for example, goes through installing prerequisites from APT &amp;ndash; which APT can do itself.&lt;/p&gt;

&lt;p&gt;In the end it&amp;rsquo;s light reading that shouldn&amp;rsquo;t take you long to finish &amp;ndash; an overview in case you don&amp;rsquo;t know much about Cacti.&lt;/p&gt;
</description>
        </item>
    
        <item>
          <title>How Linux iostat Computes Metrics</title>
          <link>https://www.xaprb.com/blog/2010/01/09/how-linux-iostat-computes-its-results/</link>
          <pubDate>Sat, 09 Jan 2010 00:00:00 UTC</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2010/01/09/how-linux-iostat-computes-its-results/</guid>
          <description>&lt;p&gt;The &lt;code&gt;iostat&lt;/code&gt; tool is one of the most important for measuring disk performance, which of course is very relevant for database administrators, whether your chosen database is Postgres, MySQL, Oracle, or anything else that runs on GNU/Linux. Have you ever wondered where statistics like await (average wait for the request to complete) come from? If you look at the disk statistics the &lt;a href=&#34;http://www.mjmwired.net/kernel/Documentation/iostats.txt&#34;&gt;Linux kernel makes available through files such as /proc/diskstats&lt;/a&gt;, you won&amp;rsquo;t see await there. How does iostat compute await? For that matter, how does it compute the average queue size, service time, and utilization? This blog post will show you how that&amp;rsquo;s computed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.xaprb.com/media/2010/01/layers.jpg&#34; alt=&#34;Layers&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;First, let&amp;rsquo;s look at the fields in /proc/diskstats. The order and location varies between kernels, but the following applies to 2.6 kernels. For reads and writes, the file contains the number of operations, number of operations merged because they were adjacent, number of sectors, and number of milliseconds spent. Those are available separately for reads and writes, although iostat groups them together in some cases. Additionally, you can find the number of operations in progress, total number of milliseconds during which I/Os were in progress, and the weighted number of milliseconds spent doing I/Os. Those are not available separately for reads and writes.&lt;/p&gt;

&lt;p&gt;The last one is very important. The field showing the number of operations in progress is transient &amp;ndash; it shows you the instantaneous value, and this &amp;ldquo;memoryless&amp;rdquo; property means you can&amp;rsquo;t use it to infer the number of I/O operations that are in progress on average. But the last field has memory, because it is defined as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Field 11 &amp;ndash; weighted # of milliseconds spent doing I/Os This field is incremented at each I/O start, I/O completion, I/O merge, or read of these stats by the number of I/Os in progress (field 9) times the number of milliseconds spent doing I/O since the last update of this field. This can provide an easy measure of both I/O completion time and the backlog that may be accumulating.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So the field indicates the total number of milliseconds that all requests have been in progress. If two requests have been waiting 100ms, then 200ms is added to the field. And thus it records what happened over the duration of the sampling interval, not just what&amp;rsquo;s happening at the instant you look at the file. We&amp;rsquo;ll come back to that later.&lt;/p&gt;

&lt;p&gt;Now, given two samples of I/O statistics and the time elapsed between them, we can easily compute everything iostat outputs in -dx mode. I&amp;rsquo;ll take them slightly out of order to reflect how the computations are done internally.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;rrqm/s is merely the incremental merges divided by the number of seconds elapsed.&lt;/li&gt;
&lt;li&gt;wrqm/s is similarly simple, and r/s, w/s, rsec/s, and wsec/s are too.&lt;/li&gt;
&lt;li&gt;avgrq-sz is the number of sectors divided by the number of I/O operations.&lt;/li&gt;
&lt;li&gt;avgqu-sz is computed from the last field in the file &amp;ndash; the one that has &amp;ldquo;memory&amp;rdquo; &amp;ndash; divided by the milliseconds elapsed. Hence the units cancel out and you just get the average number of operations in progress during the time period. The name (short for &amp;ldquo;average queue size&amp;rdquo;) is a little bit ambiguous. This value doesn&amp;rsquo;t show how many operations were queued but not yet being serviced &amp;ndash; it shows how many were &lt;em&gt;either&lt;/em&gt; in the queue waiting, &lt;em&gt;or&lt;/em&gt; being serviced. The exact wording of the kernel documentation is &amp;ldquo;&amp;hellip;as requests are given to appropriate struct request_queue and decremented as they finish.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;%util is the total time spent doing I/Os, divided by the sampling interval. This tells you how much of the time the device was busy, but it doesn&amp;rsquo;t really tell you whether it&amp;rsquo;s reaching its limit of throughput, because the device could be backed by many disks and hence capable of multiple I/O operations simultaneously.&lt;/li&gt;
&lt;li&gt;await is the total time for all I/O operations summed, divided by the number of I/O operations completed.&lt;/li&gt;
&lt;li&gt;svctm is the most complex to derive. It is the utilization divided by the throughput. You saw utilization above; the throughput is the number of I/O operations in the time interval.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although the computations and their results seem both simple and cryptic, it turns out that you can derive a lot of information from the relationship between these various numbers.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve shown how the numbers are computed, but now you might ask, why are those things true? Why are those the correct relationships to use when computing these metrics?&lt;/p&gt;

&lt;p&gt;The answer lies in several interrelated theories and properties:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Queueing Theory. This is the study of &amp;ldquo;customers&amp;rdquo; arriving at &amp;ldquo;servers&amp;rdquo; to be
serviced. In the disk&amp;rsquo;s case, the customers are I/O requests, and the disks
are the servers. Queueing theory explains the relationship between the length
of the queue, the number of requests resident in the entire system at a given
time, the amount of time spent waiting, the amount of time being serviced
once you stop waiting and reach a device, and so on. The terminology iostat
uses is rather confusing when compared to queueing theory&amp;rsquo;s standard
terminology. For example, avgqu-sz seems to be called &amp;ldquo;average queue size,&amp;rdquo;
but strictly speaking, it is actually the average number of requests
&lt;em&gt;resident&lt;/em&gt;, not just queued. The number queued is a smaller number than those
resident.&lt;/li&gt;
&lt;li&gt;Little&amp;rsquo;s Law. If you don&amp;rsquo;t know Little&amp;rsquo;s Law, you should really learn it. It
states that in a stable system, where all requests eventually complete, then
over the long run, L = &amp;lambda;W, or as I prefer to state it, N=XR. The number of
requests (customers) resident in the system (whether queued or in service) is
L or N. It is equal to the arrival rate &amp;lambda; (or throughput X) times the
residence time W (or response time R).&lt;/li&gt;
&lt;li&gt;The utilization law, &amp;rho; = &amp;lambda;S. This states that utilization is
throughput times service time.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you&amp;rsquo;d like to learn more about queueing theory and these relationships, I
encourage you to do so. It&amp;rsquo;s really required material for anyone doing
performance-related work in my opinion. I also happen to have written what I
believe is the most accessible and comprehensible &lt;a href=&#34;https://www.vividcortex.com/resources/queueing-theory/&#34;&gt;introduction to queueing
theory&lt;/a&gt; available.&lt;/p&gt;

&lt;p&gt;Image by &lt;a href=&#34;https://www.flickr.com/photos/doug88888/3139395660&#34;&gt;doug88888&lt;/a&gt;.&lt;/p&gt;</description>
        </item>
    
        <item>
          <title>Vote for Cacti template enhancements</title>
          <link>https://www.xaprb.com/blog/2009/12/30/vote-for-cacti-template-enhancements/</link>
          <pubDate>Wed, 30 Dec 2009 00:00:00 UTC</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2009/12/30/vote-for-cacti-template-enhancements/</guid>
          <description>&lt;p&gt;If you&amp;rsquo;d like some improvements to the Cacti templates (MySQL, Apache, Memcached, and more) I&amp;rsquo;ve been maintaining, please make your voice heard &amp;ndash; either write to the &lt;a href=&#34;http://groups.google.com/group/better-cacti-templates&#34;&gt;mailing list&lt;/a&gt;, or post a new issue (or comment on an existing one) on the &lt;a href=&#34;http://code.google.com/p/mysql-cacti-templates/issues/list&#34;&gt;issue list&lt;/a&gt;. I&amp;rsquo;ve got a bunch of work underway, including a test suite for ss_get_by_ssh.php.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://vividcortex.com/&#34;&gt;VividCortex&lt;/a&gt; is the startup I founded in 2012. It&amp;rsquo;s the easiest way to monitor what
your servers are doing in production and I consider it far superior to Cacti. VividCortex offers &lt;a href=&#34;https://vividcortex.com/monitoring/mysql/&#34;&gt;MySQL performance
monitoring&lt;/a&gt; and &lt;a href=&#34;https://vividcortex.com/monitoring/postgres/&#34;&gt;PostgreSQL
performance management&lt;/a&gt; among many
other features.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
    
        <item>
          <title>Version 1.1.5 of improved Cacti templates released</title>
          <link>https://www.xaprb.com/blog/2009/12/13/version-1-1-5-of-improved-cacti-templates-released/</link>
          <pubDate>Sun, 13 Dec 2009 00:00:00 UTC</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2009/12/13/version-1-1-5-of-improved-cacti-templates-released/</guid>
          <description>&lt;p&gt;I&amp;rsquo;ve released version 1.1.5 of my &lt;a href=&#34;http://code.google.com/p/mysql-cacti-templates/&#34;&gt;improved Cacti templates&lt;/a&gt; for MySQL and other components of a LAMP application. This is a pure bug-fix release. One of the bug fixes prevents spikes in graphs, but requires you to rebuild your RRD files. There are &lt;a href=&#34;http://code.google.com/p/mysql-cacti-templates/wiki/UpgradingTemplates&#34;&gt;upgrade instructions&lt;/a&gt; on the project wiki for this and all releases. Use the &lt;a href=&#34;http://code.google.com/p/mysql-cacti-templates/issues/list&#34;&gt;project issue tracker&lt;/a&gt; to view and report issues, and use the &lt;a href=&#34;http://groups.google.com/group/better-cacti-templates&#34;&gt;project mailing list&lt;/a&gt; to discuss the templates and scripts.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://vividcortex.com/&#34;&gt;VividCortex&lt;/a&gt; is the startup I founded in 2012. It&amp;rsquo;s the easiest way to monitor what
your servers are doing in production and I consider it far superior to Cacti. VividCortex offers &lt;a href=&#34;https://vividcortex.com/monitoring/mysql/&#34;&gt;MySQL performance
monitoring&lt;/a&gt; and &lt;a href=&#34;https://vividcortex.com/monitoring/postgres/&#34;&gt;PostgreSQL
performance management&lt;/a&gt; among many
other features.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The full changelog follows:&lt;/p&gt;

&lt;pre&gt;2009-12-13: version 1.1.5

  * Support for getting replica lag via mk-heartbeat was broken (issue 87).
  * The memcached stats command hung because it lacked &#34;quit&#34; (issue 65).
  * The COUNTER data type caused spikes; switched to DERIVE instead (issue41).
  * LOCK WAIT in an InnoDB transaction could cause an error (issue 91).
  * The cache file name didn&#39;t include the MySQL port (issue 82).
  * Added the -q option to the SSH command to quell missing homedir warnings.
  * The --port option to the MySQL templates could not be null.
  * The log_bytes_flushed and log_bytes_written were renamed (issue 81).
&lt;/pre&gt;
</description>
        </item>
    
        <item>
          <title>Version 1.1.4 of improved Cacti templates released</title>
          <link>https://www.xaprb.com/blog/2009/10/25/version-1-1-4-of-improved-cacti-templates-released/</link>
          <pubDate>Sun, 25 Oct 2009 00:00:00 UTC</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2009/10/25/version-1-1-4-of-improved-cacti-templates-released/</guid>
          <description>&lt;p&gt;I&amp;rsquo;ve released version 1.1.4 of my &lt;a href=&#34;http://code.google.com/p/mysql-cacti-templates/&#34;&gt;improved Cacti templates&lt;/a&gt;. Unlike the prior release, which was solely bug fixes, this one includes new graphs in the MySQL template. Some of the graphs are of data that&amp;rsquo;s exposed in standard MySQL versions, but some of it is available only in &lt;a href=&#34;http://www.percona.com/percona-lab.html&#34;&gt;Percona&amp;rsquo;s high-performance builds of the MySQL database server&lt;/a&gt;. If you don&amp;rsquo;t have a Percona build, those graphs will just contain nothing, but there is no detrimental effect.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://vividcortex.com/&#34;&gt;VividCortex&lt;/a&gt; is the startup I founded in 2012. It&amp;rsquo;s the easiest way to monitor what
your servers are doing in production and I consider it far superior to Cacti. VividCortex offers &lt;a href=&#34;https://vividcortex.com/monitoring/mysql/&#34;&gt;MySQL performance
monitoring&lt;/a&gt; and &lt;a href=&#34;https://vividcortex.com/monitoring/postgres/&#34;&gt;PostgreSQL
performance management&lt;/a&gt; among many
other features.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This template release is fully backwards compatible with the previous release. The upgrade process is to copy the new PHP file into place and import the new template file. You can then add the new graphs to your hosts.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve also taken the opportunity to address many of the other open issues. Most of these were minor, such as a debug log to help troubleshoot. Some are big improvements, such as no longer using GET_LOCK() in MySQL to arbitrate access to the cache file. A list of open issues can always be found at &lt;a href=&#34;http://code.google.com/p/mysql-cacti-templates/issues/list&#34;&gt;http://code.google.com/p/mysql-cacti-templates/issues/list&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To ease the process of future upgrades, I&amp;rsquo;ve also added in a gratuitous GPRINT definition, which is unused and merely records the installed version of the template (both the template version, and the version of the PHP file against which it was generated).&lt;/p&gt;

&lt;p&gt;The full changelog follows.&lt;/p&gt;

&lt;pre&gt;
2009-10-25: version 1.1.4

        * Changed SSH options so host keys are accepted automatically (issue 68).
        * Parsing of the pending_ibuf_aio_reads property was broken.
        * Parsing of the pending_aio_log_ios property was broken.
        * Parsing of the pending_aio_sync_ios property was broken.
        * Added a debugging log for ss_get_mysql_stats.php (issue 54).
        * Added the --lint_check option to make-template.pl (issue 80).
        * Removed the use of GET_LOCK() and changed to flock() instead (issue 78).
        * The template and script version is now recorded in a GPRINT (issue 79).
        * Restored unflushed_log, which was accidentally deleted in 1.1.3.
        * Added the InnoDB Internal Hash Memory Usage graph (issue 75).
        * Added the InnoDB Checkpoint Age graph (issue 73).
        * Added the InnoDB Insert Buffer Usage graph (issue 74).
        * Added the InnoDB Active/Locked Transactions graph.
        * Added the InnoDB Memory Allocation graph.
        * Added the InnoDB Adaptive Hash Index graph.
        * Added the InnoDB Tables In Use graph (issue 32).
        * Added the InnoDB Current Lock Waits graph.
        * Added the InnoDB Lock Structures graph (issue 32).
&lt;/pre&gt;
</description>
        </item>
    
        <item>
          <title>Version 1.1.3 of improved Cacti graphs for MySQL released</title>
          <link>https://www.xaprb.com/blog/2009/10/24/version-1-1-3-of-improved-cacti-graphs-for-mysql-released/</link>
          <pubDate>Sat, 24 Oct 2009 00:00:00 UTC</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2009/10/24/version-1-1-3-of-improved-cacti-graphs-for-mysql-released/</guid>
          <description>&lt;p&gt;I&amp;rsquo;ve just released version 1.1.3 of the &lt;a href=&#34;http://code.google.com/p/mysql-cacti-templates/&#34;&gt;Cacti templates I wrote for MySQL&lt;/a&gt;. This is a bug-fix release only, and affects only ss_get_mysql_stats.php. To upgrade from the previous release, upgrade ss_get_mysql_stats.php. Don&amp;rsquo;t forget to save and restore your configuration options, if any. (Note that there is a feature to help with this: you can keep configuration options in ss_get_mysql_stats.php.cnf to avoid making them in ss_get_mysql_stats.php.)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://vividcortex.com/&#34;&gt;VividCortex&lt;/a&gt; is the startup I founded in 2012. It&amp;rsquo;s the easiest way to monitor what
your servers are doing in production and I consider it far superior to Cacti. VividCortex offers &lt;a href=&#34;https://vividcortex.com/monitoring/mysql/&#34;&gt;MySQL performance
monitoring&lt;/a&gt; and &lt;a href=&#34;https://vividcortex.com/monitoring/postgres/&#34;&gt;PostgreSQL
performance management&lt;/a&gt; among many
other features.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next up: actual template changes! More graphs!&lt;/p&gt;

&lt;p&gt;The changelog follows.&lt;/p&gt;

&lt;pre&gt;2009-10-24: version 1.1.3

        * This is a bug-fix release only, and contains no template changes.
        * To upgrade from the previous release, upgrade ss_get_mysql_stats.php.
        * MySQL 5.1 broke backwards compatibility with table_cache (issue 63).
        * Added a version number to the script (partial fix for issue 79).
        * Added a test suite (issue 76, issue 59).
        * Math operations were done in MySQL instead of PHP (issue 25).
        * SHOW STATUS values didn&#39;t override SHOW INNODB STATUS parsing (issue 24).
        * Long error messages were not appearing in the Cacti log.
        * SHOW INNODB STATUS parsing for unpurged_txns was broken.
        * SHOW INNODB STATUS parsing for innodb_lock_structs was broken.
        * SHOW INNODB STATUS parsing for pending_log_flushes was broken (issue 62).
        * SHOW INNODB STATUS parsing for pending_buf_pool_flushes was broken.
        * SHOW INNODB STATUS parsing for pending_ibuf_aio_reads was broken.
        * SHOW INNODB STATUS parsing for pending_aio_log_ios was broken.
        * SHOW INNODB STATUS parsing for pending_aio_sync_ios was broken.
        * Made SHOW INNODB STATUS parsing less sensitive to false positive matches.
&lt;/pre&gt;
</description>
        </item>
    
        <item>
          <title>A tip when upgrading mysql-cacti-templates</title>
          <link>https://www.xaprb.com/blog/2009/10/15/a-tip-when-upgrading-mysql-cacti-templates/</link>
          <pubDate>Thu, 15 Oct 2009 00:00:00 UTC</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2009/10/15/a-tip-when-upgrading-mysql-cacti-templates/</guid>
          <description>&lt;p&gt;A client recently asked me to fix some Cacti graphs that had broken after upgrading &lt;a href=&#34;http://code.google.com/p/mysql-cacti-templates&#34;&gt;the Cacti templates I wrote for MySQL&lt;/a&gt;. The symptoms were weird; I&amp;rsquo;m not sure I understand fully what happened, but some of the graphs were OK and some had only part of the data they were supposed to. Some graphs would have one data element as usual, and others would be nan (not a number).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://vividcortex.com/&#34;&gt;VividCortex&lt;/a&gt; is the startup I founded in 2012. It&amp;rsquo;s the easiest way to monitor what
your servers are doing in production and I consider it far superior to Cacti. VividCortex offers &lt;a href=&#34;https://vividcortex.com/monitoring/mysql/&#34;&gt;MySQL performance
monitoring&lt;/a&gt; and &lt;a href=&#34;https://vividcortex.com/monitoring/postgres/&#34;&gt;PostgreSQL
performance management&lt;/a&gt; among many
other features.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After turning on the debug logs, I found that the script was returning the data correctly &amp;ndash; it was not a script problem. But after Cacti got the data from the script, it wasn&amp;rsquo;t associating it correctly with the RRD archives. Here&amp;rsquo;s a log message:&lt;/p&gt;

&lt;pre&gt;10/14/2009 12:05:05 PM - CMDPHP: Poller[0] Host[11] DS[1270] CMD: /usr/bin/php -q
  /opt/cacti/scripts/ss_get_mysql_stats.php --host dbserver
  --items bj,bm --user --pass , output: bj:68 bm:64
10/14/2009 12:05:05 PM - CMDPHP: Poller[0] DEVEL: SQL Exec: &#34;insert into poller_output
  (local_data_id, rrd_name, time, output) values
  (1270, &#39;&#39;, &#39;2009-10-14 12:05:03&#39;, &#39;bj:68 bm:64&#39;)&#34;&lt;/pre&gt;

&lt;p&gt;The suspicious thing here is that the rrd_name is blank in the INSERT statement. That shows me that Cacti is having trouble with something. A little more digging in the log, and I found&lt;/p&gt;

&lt;pre&gt;10/14/2009 12:05:06 PM - POLLER: Poller[0] CACTI2RRD: /usr/bin/rrdtool update
  /opt/cacti/rra/dbserver_thread_cache_size_1270.rrd
  --template Threads_created 1255547103:68&lt;/pre&gt;

&lt;p&gt;Here we see that Cacti is only updating the Threads_created item in the RRD file. It should be updating a couple of them. Indeed the graphs showed nan for thread_cache_size, as expected from this command.&lt;/p&gt;

&lt;p&gt;Next I found this SQL statement (all by searching for 1270 in the log, by the way):&lt;/p&gt;

&lt;pre&gt;select
     data_template_rrd.data_source_name,
     data_input_fields.data_name
     from (data_template_rrd,data_input_fields)
     where data_template_rrd.data_input_field_id=data_input_fields.id
     and data_template_rrd.local_data_id=1270&lt;/pre&gt;

&lt;p&gt;I executed this and found a result like this:&lt;/p&gt;

&lt;pre&gt;mysql&gt; select
    -&gt;      data_template_rrd.data_source_name,
    -&gt;      data_input_fields.data_name
    -&gt;      from (data_template_rrd,data_input_fields)
    -&gt;      where data_template_rrd.data_input_field_id=data_input_fields.id
    -&gt;      and data_template_rrd.local_data_id=1270;
+-------------------+--------------------------+
| data_source_name  | data_name                |
+-------------------+--------------------------+
| thread_cache_size | thread_cache_size        | 
| Threads_created   | bj                       | 
+-------------------+--------------------------+
&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s not right &amp;ndash; the data_name for thread_cache_size should be &amp;ldquo;bm&amp;rdquo;. This is a &amp;ldquo;compression&amp;rdquo; tactic I employed a while ago to limit the size of the returned data, because Cacti has a silly buffer size limit that was truncating and discarding data from the script. So this server&amp;rsquo;s Cacti install seemed to have been upgraded from an older version of the templates, and not all of the data sources were updated correctly.&lt;/p&gt;

&lt;p&gt;The fix for this was to write a couple of custom scripts to find such occurrences in the log and update the database to have the correct two-letter data_name.&lt;/p&gt;
</description>
        </item>
    
        <item>
          <title>Version 1.1.2 of improved Cacti templates released</title>
          <link>https://www.xaprb.com/blog/2009/05/07/version-112-of-improved-cacti-templates-released/</link>
          <pubDate>Thu, 07 May 2009 00:00:00 UTC</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2009/05/07/version-112-of-improved-cacti-templates-released/</guid>
          <description>&lt;p&gt;I&amp;rsquo;ve packaged up and released version 1.1.2 of the &lt;a href=&#34;http://code.google.com/p/mysql-cacti-templates/&#34;&gt;Cacti templates I&amp;rsquo;ve written for MySQL, Apache, memcached, nginx etc&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://vividcortex.com/&#34;&gt;VividCortex&lt;/a&gt; is the startup I founded in 2012. It&amp;rsquo;s the easiest way to monitor what
your servers are doing in production and I consider it far superior to Cacti. VividCortex offers &lt;a href=&#34;https://vividcortex.com/monitoring/mysql/&#34;&gt;MySQL performance
monitoring&lt;/a&gt; and &lt;a href=&#34;https://vividcortex.com/monitoring/postgres/&#34;&gt;PostgreSQL
performance management&lt;/a&gt; among many
other features.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Anyone who would like to help write documentation (or do anything else, for that matter) is welcomed to participate. I&amp;rsquo;ll give commit access at the drop of a hat.&lt;/p&gt;

&lt;p&gt;Changelog:&lt;/p&gt;

&lt;pre&gt;2009-05-07: version 1.1.2

    * The parsing code did not handle InnoDB plugin / XtraDB (issue 52).
    * The servername was hardcoded in ss_get_by_ssh.php (issue 57).
    * Added Handler_ graphs (issue 47).
    * Config files can be used instead of editing the .php file (issue 39).
    * binary log space is now calculated without a MySQL query (issue 48).
    * There was no easy way to force inputs to be filled (issue 45).
    * Some graphs were partially hidden without --lower-limit (issue 43).
    * Flipped some elements across the Y axis (issue 42).
    * Added Apache, Nginx, and GNU/Linux templates.
    * Unknown output is now -1 instead of 0 to prevent spikes in graphs.
    * If you want to use a script server, you must now explicitly configure it.
    * UNIX sockets weren&#39;t permitted for MySQL (issue 38).
&lt;/pre&gt;
</description>
        </item>
    
        <item>
          <title>Secure, easy Cacti graphing without SNMP</title>
          <link>https://www.xaprb.com/blog/2009/04/25/secure-easy-cacti-graphing-without-snmp/</link>
          <pubDate>Sat, 25 Apr 2009 00:00:00 UTC</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2009/04/25/secure-easy-cacti-graphing-without-snmp/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;http://www.cacti.net/&#34;&gt;Cacti&lt;/a&gt; is a great tool for collecting information about systems and graphing it. However, it likes to use SNMP, and SNMP is often not desirable. Instead, I often see the need for a method that is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Secure. Use trusted, well-known, encrypted communication. Do not open up new ports.&lt;/li&gt;
&lt;li&gt;Zero install on the monitored system.&lt;/li&gt;
&lt;li&gt;As little installation or modification on the monitoring system as possible.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Over the last several years, I&amp;rsquo;ve slowly created more and more software to create Cacti graphs via standard POSIX command-line utilities over SSH with key-pair authentication. (I&amp;rsquo;ve also created similar software for Nagios, but that&amp;rsquo;s another matter.) The major problem with the work I&amp;rsquo;ve done is that it&amp;rsquo;s totally un-publicized.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://vividcortex.com/&#34;&gt;VividCortex&lt;/a&gt; is the startup I founded in 2012. It&amp;rsquo;s the easiest way to monitor what
your servers are doing in production and I consider it far superior to Cacti. VividCortex offers &lt;a href=&#34;https://vividcortex.com/monitoring/mysql/&#34;&gt;MySQL performance
monitoring&lt;/a&gt; and &lt;a href=&#34;https://vividcortex.com/monitoring/postgres/&#34;&gt;PostgreSQL
performance management&lt;/a&gt; among many
other features.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The system works by passing command-line arguments to a local PHP script like any other Cacti script. This script then executes a remote SSH command, such as &lt;code&gt;ssh somehost uptime&lt;/code&gt; and extracts statistics from the result.&lt;/p&gt;

&lt;p&gt;The requirements are very simple. On the system to be monitored, a public key must be installed. On the monitoring system, the cacti user account must have a private SSH key that it can read and others can&amp;rsquo;t. This is standard for any SSH key. The cacti user account must also have the SSH key fingerprint of the monitored system in its known_hosts file.&lt;/p&gt;

&lt;p&gt;The work I&amp;rsquo;ve done thus far is available from Subversion in the &lt;a href=&#34;http://code.google.com/p/mysql-cacti-templates&#34;&gt;mysql-cacti-templates&lt;/a&gt; project. This project has the scaffolding for creating Cacti templates easily, so I&amp;rsquo;m using it.&lt;/p&gt;

&lt;p&gt;At this point, the following are available:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apache&lt;/li&gt;
&lt;li&gt;Operating system (CPU, memory, load average, etc)&lt;/li&gt;
&lt;li&gt;Memcached&lt;/li&gt;
&lt;li&gt;Nginx&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unfinished work includes network, disk, etc. The techniques to monitor something of which there is a variable number (e.g. there can be many disks, each of which needs its own graph) are a little more complex than simple things like monitoring overall CPU usage. So that&amp;rsquo;s a work in progress. Once it&amp;rsquo;s done, it&amp;rsquo;ll make it really easy to discover and monitor multiples of &lt;em&gt;anything&lt;/em&gt; &amp;ndash; for example, multiple MySQL servers or memcached servers on a single host &amp;ndash; without creating a new host for each resource to monitor.&lt;/p&gt;

&lt;p&gt;As with the MySQL templates I created, these templates are comprehensive and have lots of nice properties most templates lack. This is something you get free with my scaffolding. If you&amp;rsquo;ve ever created templates by hand through the web interface, you should give my work a try. You can turn a three-day project into a few minutes and avoid bugs and other hassles. There are &lt;a href=&#34;http://code.google.com/p/mysql-cacti-templates/wiki/CreatingGraphs&#34;&gt;instructions for creating Cacti templates&lt;/a&gt; on the project wiki.&lt;/p&gt;
</description>
        </item>
    
        <item>
          <title>News on MySQL Cacti Templates</title>
          <link>https://www.xaprb.com/blog/2009/02/09/news-on-mysql-cacti-templates/</link>
          <pubDate>Mon, 09 Feb 2009 00:00:00 UTC</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2009/02/09/news-on-mysql-cacti-templates/</guid>
          <description>&lt;p&gt;It&amp;rsquo;s been a while since I&amp;rsquo;ve sent any news about the &lt;a href=&#34;http://code.google.com/p/mysql-cacti-templates/&#34;&gt;MySQL Cacti Templates&lt;/a&gt; project I started a while ago. Here&amp;rsquo;s what&amp;rsquo;s new:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://vividcortex.com/&#34;&gt;VividCortex&lt;/a&gt; is the startup I founded in 2012. It&amp;rsquo;s the easiest way to monitor what
your servers are doing in production and I consider it far superior to Cacti. VividCortex offers &lt;a href=&#34;https://vividcortex.com/monitoring/mysql/&#34;&gt;MySQL performance
monitoring&lt;/a&gt; and &lt;a href=&#34;https://vividcortex.com/monitoring/postgres/&#34;&gt;PostgreSQL
performance management&lt;/a&gt; among many
other features.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;First of all, it&amp;rsquo;s not just MySQL templates anymore. It&amp;rsquo;s a generic framework and tools for creating templates, and I&amp;rsquo;ve written templates for Apache, Memcached, etc. I just haven&amp;rsquo;t publicized it yet.&lt;/li&gt;
&lt;li&gt;Second, there&amp;rsquo;s a mailing list, &lt;a href=&#34;http://groups.google.com/group/better-cacti-templates&#34;&gt;http://groups.google.com/group/better-cacti-templates&lt;/a&gt; You see it&amp;rsquo;s called &amp;ldquo;better cacti templates&amp;rdquo; which is what I ought to have called the project to begin with :-) I hope you&amp;rsquo;ll use the mailing list instead of emailing me directly, for all the usual reasons.&lt;/li&gt;
&lt;li&gt;There are some open issues I cannot reproduce. I believe they&amp;rsquo;re problems, but I can&amp;rsquo;t solve them. Some of them make no sense to me; I don&amp;rsquo;t know why others are seeing behavior I&amp;rsquo;m not. However these &lt;em&gt;seem&lt;/em&gt; to be problems with Cacti, not problems with the templates. Anyone who wants commit access is welcomed to ask for it.&lt;/li&gt;
&lt;li&gt;Some people have been asking about Spine. I haven&amp;rsquo;t used it and none of my customers has asked me about it, so the short answer is &amp;ndash; if you want Spine support, don&amp;rsquo;t wait for it to happen for free; either contribute it yourself or pay someone (me?) to do it.&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
    
        <item>
          <title>MySQL Cacti templates version 1.1.1 released</title>
          <link>https://www.xaprb.com/blog/2008/10/15/mysql-cacti-templates-version-111-released/</link>
          <pubDate>Wed, 15 Oct 2008 00:00:00 UTC</pubDate>
          <author></author>
          <guid>https://www.xaprb.com/blog/2008/10/15/mysql-cacti-templates-version-111-released/</guid>
          <description>&lt;p&gt;I&amp;rsquo;ve released version 1.1.1 of the &lt;a href=&#34;http://code.google.com/p/mysql-cacti-templates/&#34;&gt;MySQL Cacti templates&lt;/a&gt; I develop. The new templates work around more Cacti limitations, including the limitation on the length of the data returned from the poller script. There&amp;rsquo;s also a new graph and many other niceties since the last release.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://vividcortex.com/&#34;&gt;VividCortex&lt;/a&gt; is the startup I founded in 2012. It&amp;rsquo;s the easiest way to monitor what
your servers are doing in production and I consider it far superior to Cacti. VividCortex offers &lt;a href=&#34;https://vividcortex.com/monitoring/mysql/&#34;&gt;MySQL performance
monitoring&lt;/a&gt; and &lt;a href=&#34;https://vividcortex.com/monitoring/postgres/&#34;&gt;PostgreSQL
performance management&lt;/a&gt; among many
other features.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Note that there are TWO incompatible changes with the previous version of the templates. You don&amp;rsquo;t have to throw away your RRA files, you just have to delete and re-import over all the existing templates. It&amp;rsquo;s not my fault, there was no other way to work around the limitations mentioned above. Really. Have fun upgrading!&lt;/p&gt;

&lt;p&gt;Version 1.1.1 is actually just a repackaging of 1.1.0.&lt;/p&gt;

&lt;p&gt;The changelog follows.&lt;/p&gt;

&lt;pre&gt;2008-10-15: version 1.1.1

    * The tarball didn&#39;t have make-template.pl mysql_definitions.pl (issue 34)

2008-10-14: version 1.1.0

    * Graphs fetched too much data, causing errors (incompatible; issue 28, 23).
    * Output of the poller script is compressed with short value names.
    * Checks can be disabled; no need to fetch INNODB STATUS if unwanted.
    * Queries could cause a MySQL thread stack overflow (issue 19).
    * Older PHP didn&#39;t have array_change_key_case function (issue 21).
    * The PROCESS privilege is required for MySQL 5.1.29 with InnoDB (issue 22).
    * Added an aggregated view of SHOW PROCESSLIST; requires PROCESS privilege.
    * The text on the graph could overflow the right-hand edge.
    * Truncated SHOW INNODB STATUS could cause an SQL error (issue 27).
    * The poller script requires proper cmdline options (incompatible change).
&lt;/pre&gt;</description>
        </item>
    

  </channel>
</rss>
